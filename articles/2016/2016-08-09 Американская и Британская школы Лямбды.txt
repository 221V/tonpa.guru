Американская и Британская школы Лямбды

Выражаю почтение и склоняюсь перед де Брейном,
отцом всех пруверов,
создателем AUTOMATH


Сейчас я объясню мотивацию синтаксиса OM/EXE. Навскидку есть несколько 
синтаксисов для лямбды:

    λ x . B x            — нетипизированная классика
    λ x : A , B x        — в научных статьях
    λ (x: A) → B x       — современный синтаксис Morte/Om
    λ (x: A) , B x       — Lean
    (x: A) B x           — LISP синтаксис
    [x: A] B(x)          — AUTOMATH
    fun (x: A) => B x    — языки программирования и французкая школа
    fun (X) -> B(X)      — Erlang


Классика используется студентами, которые решают домашки, на википедии, и в 
HOL/Isabelle. Второй синтаксис используется в самых крутых статьях по лямбда 
исчислению, его использует например Страйхер, третий используется тоже часто в 
статьях, например Пфенинг. LISP синтаксис заюзал в своей работе по индуктивных 
семейставах Дыбьер. Но все это вариации AUTOMATH, где есть [], что есть там и 
квантор и лямбда. Есть еще логический синтаксис правил вывода, который заюзал 
МакБрайд в Эпиграмме, но это уже через чур. Синтаксис, который используется в 
современных языках программирования, тоже приведен, тут по столько по скольку, 
так как статьи на нем писать неудобно. Мы выбрали в качестве синтаксиса лямбда 
исчисления в OM тот, где есть и скобочки и стрелочки. Нормальные формы лямбд мы 
выстраиваем вертикально так как это делал Дыбьер, чтобы видеть паттерн и 
глубину терма.

То как выглядят индуктивные типы условно можно разделить на британскую школу 
LCF/ML/HOL/Hope/Miranda/Haskell/Agda/Idris и американскую 
LISP/ACL2/NuPRL/Lean/EXE школу. Это помогает понять почему мы выбрали скобочки 
и тут. Синтаксисом OM/EXE мы хотим показать приемственность к другой, 
не-британской школе. Как мы определяем List и как это делают британцы:

    data List (A: *): * :=
         (Nil: List A) 
         (Cons: A → List A → List A)

    data List (A : Set) : Set where
         []  : List A
         _∷_ : (x : A) (xs : List A) → List A


Тут сразу несколько моментов, мы хотим, в базовой поставке EXE, без notation, 
парсер должен быть минималистичный, мы всячески избегаем 2D синтаксиса 
ориентированного на \n и \r и обрамляем все скобочками, как это происходит в 
лиспах и Lean. Благодаря чему параметры индуктивных конструкторов напоминают 
множественные параметры наших лямбд \ (B: *) (x: A) -> B x.

Т.е. OM/EXE классифицируется исключительно, как синтаксис американской школы, с 
еще большим уклоном в LISP, чем калифорнийская Annah/Morte. Этот синтаксис 
создан для того, чтобы статьи выглядели красиво и читались ревьюверами 
мгновенно (кроме этого еще код нужно компактный писать, чем не все типовые 
теоретики могут похвастаться даже в своих Agda репозиториях).

Ну а гениальный де Брейн, и его сердечный сын Барендрехт, стоят как бы вне 
добра и зла, вне американской и британской школ.

TAGS (EDIT) cs, exe, lisp, om

