Pure Sigma

Кто-то на гиттер канале просил год назад, чтобы ему Сигму закодировали в чистых 
функциях. Я тогда не смог это сделать, но вот недавно формировал домашки и 
решил поставить такое задание в качестве домашки. Мне вроде говорили, что 
Альтенкирх где-то писал что это невозможно или по крайней мере это не обладает 
достаточно хорошими вычислительными характеристиками.

-- Sigma/@
   \ (A: *)
-> \ (P: A -> *)
-> \ (n: A)
-> \/ (Exists: *)
-> \/ (Intro: A -> P n -> Exists)
-> Exists

-- Sigma/Intro
   \ (A: *)
-> \ (P: A -> *)
-> \ (x: A)
-> \ (y: P x)
-> \ (Exists: *)
-> \ (Intro: A -> P x -> Exists)
-> Intro x y

-- Sigma/fst
   \ (A: *)
-> \ (B: A -> *)
-> \ (n: A)
-> \ (S: #Sigma/@ A B n)
-> S A ( \(x: A) -> \(_: B n) -> x )

-- Sigma/snd
   \ (A: *)
-> \ (B: A -> *)
-> \ (n: A)
-> \ (S: #Sigma/@ A B n)
-> S (B n) ( \(_: A) -> \(y: B n) -> y )

-- Sigma/test
-- P: nat -> U = (\(_:nat) -> list nat)
-- mk nat P n5 nil
#Sigma/Intro #Nat/@
             (\(n: #Nat/@) -> #List/@ #Nat/@)
             #Nat/Five
             (#List/replicate #Nat/@ #Nat/Five #Nat/Zero)

-- Sigma/test.fst
-- fst nat P zero test
#Sigma/fst #Nat/@
           (\(n: #Nat/@) -> #List/@ #Nat/@)
           #Nat/Zero
           #Sigma/test

-- Sigma/test.snd
-- snd nat P zero test
#Sigma/snd #Nat/@
           (\(n: #Nat/@) -> #List/@ #Nat/@)
           #Nat/Zero
           #Sigma/test


В тестах создание тапла (nat, list nat) = (5, [0,0,0,0,0]) и взятие у него 
первой и второй проекции:

1> om:fst(om:erase(om:norm(om:a("#Sigma/test.snd"))))
== om:fst(om:erase(om:norm(om:a("(#List/replicate #Nat/@ #Nat/Five 
#Nat/Zero)")))).
true
2> om:fst(om:erase(om:norm(om:a("#Sigma/test.fst"))))
== om:fst(om:erase(om:norm(om:a("#Nat/Five")))).
true
3> om:type(om:type(om:a("#Sigma/snd"))).
{star,1}
4> om:type(om:type(om:a("#Sigma/fst"))).
{star,1}


Трюк заключается в протаскивании первого элемента в базу, все равно конструктор 
один и он же принимает его. Т.е. классическое индуктивное определение

data Sigma (A: Type) (P: A -> Type): Type
   = (intro: (x:A) (y:P x) -> Sigma A P)


сменяется на следующее:

data Sigma (A: Type) (P: A -> Type) (x:A): Type
   = (intro: (y:P x) -> Sigma A P)


Наверн проблемы начнутся как с pred, когда придется закодировать N-тапл из сигм 
и переносить все кроме последнего в базу, но тоже вроде все законно. 
Единственное к чему тут можно предъявить претензии — это дополнительный 
параметр пустышка #Nat/Zero который передается в примерах в качестве (x:A) при 
вызове элиминаторов, он нужен для совместимости типов, но как видно из примера, 
экстрактятся из сконструированного тапла #Sigma/Intro настоящие значения (fst 
test = 5 и snd test = [0,0,0,0,0]). Другими словами это означает что первый 
элемент типовой пары должен быть как минимум стягиваемым пространством, что в 
принципе в духе Сигмы и квантора существования. Что думают по этому поводу 
типовые теоретики?

P.S. Модель в cubicaltt, для тех, кто не доверяет Ом.

module puresigma where
import nat
import list

P: nat -> U = (\(_:nat) -> list nat)
sig (A:U)(P:A->U)(x:A): U = (e:U)->(i:A->P x->e)->e
mk  (A:U)(P:A->U)(x:A)(y:P x)(e:U)(i:A->P x->e):e=i x y
fst (A:U)(P:A->U)(x:A)(s:sig A P x):A=s A(\(z:A)(y:P x)->z)
snd (A:U)(P:A->U)(x:A)(s:sig A P x):P x=s(P x)(\(z:A)(y:P x)->y)

test: sig nat P n5 = mk nat P n5 nil
test_pr1: nat = fst nat P zero test
test_pr2: list nat = snd nat P zero test

> test_pr2
EVAL: nil
> test_pr1
EVAL: suc (suc (suc (suc (suc zero))))

Тут мне подсказывают, что писал Thorsten Altenkirch:

Ok, when we think of homogenous tuples AxA then this can also be understood as 
a function 2 -> A. This also works for heterogenous tuples like AxB using 
dependent functions Pi x:2.if x then A else B. However the next logical step is 
Sigma x:A.B x, which have no good representations as functions (unless we 
accept very dependent functions which in my mind goes against the spirit of 
type theory). For this reason it seems to me that the generalisation from -> to 
Pi and from x to Sigma is the primary one, and the fact that tuples can be 
represented as functions is secondary.

Позволю себе не согласиться с Торстеном,Альтенкирхом: на мой взгляд, именно 
Черч кодировка и показывает скрытую категорную стркутуру теории типов обнажая 
ее самантику, она ни как не может идти в разрез духа тетории типов, которым как 
раз и является теория категорий.

Существует и другая более общая связь между Пи и Сигмой. Сигму можно 
интерпретировать как тотальное пространство расслоения B -> A над A. Где 
расслоение — это терм
section (A B : U) (p : A -> B) (s : B -> A) : U = (y : B) -> Path B (p (s y)) y
А элементы Пи или лямбды — это сечения тривиального расслоения A -> A x B. 
Симметричной функцией является ретракт:
retract (A B : U) (f : A -> B) (g : B -> A) : U = (a : A) -> Path A (g (f a)) a
Не могу к сожалению (пока) понять, как устроены йоги Гротендика, но это 
устройство связи Пи и Сигмы помоему две из них и есть.

Надо переписать на кубикал, кто возьмется?
Prerequisites:

_⋔_ : ∀ {a b} → Set a → Set b → Set (a ⊔ b)
_⋔_ A B = A → B

_⊗_ : ∀ {a b} → Set a → Set b → Set (a ⊔ b)
_⊗_ A B = A × B

∫↓ : ∀ {a b} {X : Set a} → (X → X → Set b) → Set (a ⊔ b)
∫↓ {X = X} P = ∀ {x} → P x x

∫↑ : ∀ {a b} {X : Set a} → (X → X → Set b) → Set (a ⊔ b)
∫↑ {X = X} P = ∐ [ x ∶ X ] P x x
Левое и правое расширения Кана:
Ran : ∀ {x c v u p} {𝔵 : Set x} {𝔠 : Set c} {𝔳 : Set v}
  → (𝒸 : 𝔠 → 𝔠 → Set u)
  → (_⋔_ : Set u → 𝔳 → Set p)
  → (G : 𝔵 → 𝔠)
  → (H : 𝔵 → 𝔳)
  → (𝔠 → Set (p ⊔ x)) = 𝒸 _⋔_ G H A = ∫↓ λ x y → 𝒸 A (G x) ⋔ H y

Lan : ∀ {x c v u p} {𝔵 : Set x} {𝔠 : Set c} {𝔳 : Set v}
  → (𝒸 : 𝔠 → 𝔠 → Set u)
  → (_⊗_ : 𝔳 → Set u → Set p)
  → (G : 𝔵 → 𝔠)
  → (H : 𝔵 → 𝔳)
  → (𝔠 → Set (p ⊔ x)) = 𝒸 _⊗_ G H A = ∫↑ λ x y → H x ⊗ 𝒸 (G y) A


По сигнатуре видно, что Пи и Сигма — элементы одного пространства.
Sigma: ∀ {x y} {X : Set x} {Y : Set y} → (X → Y) → 𝒫 x X → 𝒫 (x ⊔ y) Y = Ran 
_≡_ _⋔_ f

Pi:    ∀ {x y} {X : Set x} {Y : Set y} → (X → Y) → 𝒫 x X → 𝒫 (x ⊔ y) Y = Lan 
_≡_ _⊗_ f


___________
[1]. Расширения Кана Бартоша 
https://henrychern.files.wordpress.com/2017/10/27.pdf
TAGS (EDIT) #list, #nat, #sigma, cs, groupoid infinity, om
