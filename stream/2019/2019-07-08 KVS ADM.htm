<html>
<head>
    <meta charset="utf-8"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="description" content=""/>
    <meta name="author" content="Namdak Tonpa"/>
    <title>2019-07-08</title>
    <link rel="stylesheet" href="../../blank.css?v=10"/>
</head>
<body>
<nav>
    <a href='../../index.html'>5HT</a>
    <a href='../index.html'>TOP</a>
    <a href='#'>2019-07-08</a>
</nav>
<main>
    <section>
        <h3>Часть 3. Администратор данных</h3>

        <p>— <a href="2019-06-30%20DEPOT.htm">Часть 1. Введение</a><br>
           — <a href="2019-07-08%20ERP%20BOOT.htm">Часть 2. Пусконаладка предприятия</a><br>
           — <a href="2019-07-08%20KVS%20ADM.htm">Часть 3. Администратор данных</a><br>
           — <a href="2019-07-09%20BPE%20ADM.htm">Часть 4. Администратор процессов</a><br>
           — <a href="2019-07-17%20ENT%20APP.htm">Часть 5. Структура приложения</a><br>
           — <a href="2019-07-19%20ENT%20PUB.htm">Часть 6. Публикация в GCP</a></p>

        <p>В этой статье я расскажу как написать простую админку для KVS
           на NITRO и N2O на 5 строчек!.</p>

    </section>
    <section>
    <h3>Постановка задачи</h3>
    <h3>Главная страница приложения</h3>
    <figure><img src="https://tonpa.guru/stream/2019/ent/2.png"/></figure>

    <p>Красным цветом выделены идентификаторы DOM элементов, которые заменяются
       на пререндереные на сервере куски HTML сниппетов. Как это происходит
       в Live View и даже PHP! Но в отличии от и использования <a href="https://tonpa.guru/stream/2013/2013-02-28%20Suck%20and%20Blow.htm">Suck and Blow</a>
       нотации для темплейт энжинов, таких как ASP, PHP, EEX, DTL и других,
       NITRO предлает встраивание в хост язык или глубокое встаивание HTML5 в Erlang в данном случае
       и является фреймворком находящимя в своём классе:
       OCaml Ocsigen, Scala Lift, SML UrWeb, F# WebSharper, Erlang Nitrogen.
       Основная идея — пишем все на одном языке и обучать новичков надо одному языку причем
       сразу показывая как писать на нем веб приложения, которые и так все понимают как писать.</p>

    <h4>lib/events/kvs.ex</h4>

   <figure><code>
defmodule <font color=red>KVS.Index</font> do
  use N2O, with: [:n2o, :nitro]
  use FORM
  use KVS
  require ERP
  require Logger

  def parse(ERP."Employee"(person:
            ERP."Person"(cn: name))),
  do: name
  def parse(_), do: []

  def event(:init),
    do:
      [<font color=red>:user</font>, <font color=red>:writers</font>, <font color=red>:session</font>, <font color=red>:enode</font>]
      |> Enum.map(fn x ->
       [ NITRO.clear(x),
         send(self(), {:direct, x})] end)

  def event(<font color=red>:user</font>),
  do: NITRO.update(<font color=red>:user</font>,
      span(body: parse(:n2o.user())))

  def event(<font color=red>:session</font>),
  do: NITRO.update(<font color=red>:session</font>,
      span(body: :n2o.sid()))

  def event(<font color=red>:enode</font>),
  do: NITRO.update(<font color=red>:enode</font>,
      span(body: NITRO.compact(:erlang.node())))

  def event({:link, i}),
  do: [
      NITRO.clear(<font color=red>:feeds</font>),
      :kvs.feed(i) |> Enum.map(fn t ->
        NITRO.insert_bottom(:feeds,
          panel(body: NITRO.compact(t))) end)
    ]

  def event(<font color=red>:writers</font>),
    do:
      :writer
      |> :kvs.all()
      |> :lists.sort()
      |> Enum.map(fn writer(id: i, count: c) ->
        NITRO.insert_bottom(
          :writers,
          panel(body:
          [link(body: i, postback: {:link, i}),
           ' (' ++ NITRO.to_list(c) ++ ')']))
      end)

  def event(_), do: []

  def ram(os), do: NITRO.compact(os)
end
    </code></figure>

    </section>
    <section>
        <h3>Elixir прелюдия</h3>

        <p>Чтобы не писать каждый раз эту прелюдию для каждого приложения приведем
           на примере PLM проекта, который уже включает почти весь стек: N2O, KVS, BPE,
           а также другие N2O протоколы CHAT, NITRO. NITRO — является портом
           Nitrogen Web Framework написанный Расти Клопхаусом.</p>

        <h4>config/config.exs</h4>
   <figure><code>
use Mix.Config

config :n2o,
  pickler: :n2o_secret,
  mq: :n2o_syn,
  port: 8043,
  proto: CHAT.Server
  mqtt_services: ['erp', 'plm'],
  ws_services: ['chat'],
  upload: "./priv/static",
  protocols:
  [
    :n2o_heart,
    :n2o_nitro,
    :n2o_ftp,
    :bpe_n2o,
    CHAT.TXT
  ],
  routes: <font color=red>KVS.Routes</font>

config :kvs,
  dba: :kvs_rocks,
  dba_st: :kvs_st,
  schema: [:kvs, :kvs_stream, :bpe_metainfo]

config :erp,
  boot:
  [
    :erp_boot,
    :acc_boot,
    :pay_boot,
    :plm_boot,
    :fin_boot
  ]
      </code></figure>

        <h4>mix.exs</h4>
   <figure><code>
defmodule PLM.Mixfile do
  use Mix.Project

  def project() do
    [
      app: :plm,
      version: "0.7.1",
      elixir: "~> 1.8.1",
      description: "PLM",
      deps: deps()
    ]
  end

  def application() do
    [
      mod: {PLM.Application, []},
      applications:
      [
        :ranch,
        :cowboy,
        :rocksdb,
        :kvs,
        :syn,
        :erp,
        :bpe,
        :n2o,
        :chat
      ]
    ]
  end

  def deps() do
    [
      {:ex_doc, "~> 0.20.2", only: :dev},
      {:cowboy, "~> 2.5.0"},
      {:rocksdb, "~> 1.2.0"},
      {:chat, "~> 3.7.2"},
      {:n2o, "~> 6.7.1"},
      {:syn, "~> 1.6.3"},
      {:kvs, "~> 6.7.4"},
      {:erp, "~> 0.7.6"},
      {:bpe, "~> 4.7.3"},
      {:nitro, "~> 4.7.3"}
    ]
  end
emd
    </code></figure>

    </section>
    <section>

        <h3>Роутер приложения</h3>

   <p>
kvs — KVS.Index<br>
    </p>

    </section>
    <section>
        <h3>Контейнер Приложения<h3>
        <h4>priv/static/kvs.htm</h4>
   <figure><code>
&lt;nav&gt;
  &lt;a href='login.htm'&gt;LOGIN&lt;/a&gt;
  &lt;a href='plm.htm'&gt;PLM&lt;/a&gt;
  &lt;a href='bpe.htm'&gt;BPE&lt;/a&gt;
  &lt;a href='form.htm'&gt;FORM&lt;/a&gt;
  &lt;a href='kvs.htm'&gt;KVS&lt;/a&gt;
&lt;/nav&gt;

&lt;aside&gt;
  &lt;article&gt;
    &lt;section&gt;
      &lt;h2&gt;KVS&lt;/h2&gt;
      &lt;p&gt;Abstract chain database&lt;/p&gt;
      &lt;div&gt;USER: &lt;span id=<font color=red>user</font>&gt;&lt;/span&gt;
            SSD: &lt;span id=<font color=red>disc</font>&gt;&lt;/span&gt;
            RAM: &lt;span id=<font color=red>ram</font>&gt;&lt;/span&gt;&lt;br&gt;
        SESSION: &lt;span id=<font color=red>session</font>&gt;&lt;/span&gt;
             VM: &lt;span id=<font color=red>enode</font>&gt;&lt;/span&gt;&lt;/div&gt;
    &lt;/section&gt;
    &lt;div class=container&gt;
      &lt;div&gt;&lt;h2&gt;WRITERS&lt;/h2&gt;
      &lt;div id=<font color=red>writers</font>&gt;&lt;/div&gt;&lt;/div&gt;
      &lt;div&gt;&lt;h2&gt;CHAINS&lt;/h2&gt;
      &lt;div id=<font color=red>feeds</font>&gt;To display the chain
              select the writer.&lt;/div&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/aside&gt;
    </code></figure>
    <p>Код приложения можно найти в следующих репозиториях:</p>
    <p>— <a href="https://github.com/enterprizing/plm">enterprizing/plm</a></p>
    </section>
</main>
<footer>Namdak Tonpa <span class="heart">&nbsp;❤&nbsp;</span> 2009—2019</footer>
</body>
</html>
