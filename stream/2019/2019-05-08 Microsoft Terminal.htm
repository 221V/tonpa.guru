<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Maxim Sokhatsky" />
    <title>2019-05-08</title>
    <link rel="stylesheet" href="https://forms.n2o.space/priv/static/css/forms.css?v=1" />
    <link rel="stylesheet" href="../../blank.css?v=5" />
</head>
<body>
<nav>
    <a href='../../index.html'>5HT</a>
    <a href='../index.html'>STREAM</a>
    <a href='#'>2019-05-08</a>
</nav>
<main>
    <section>
        <h3>Microsoft Terminal</h3>

        <p>Самое громкое опен соурс событие Майкрософт после первой версии WSL на BUILD.
           Майкрософт написала трушный терминал по спекам xterm с поддержкой DirectX рендерера,
           клиппинг регионами, опен соурсный Console Host, и минималистичный (86KB exe-файл) WinRT терминал с табами,
           который за 2 дня набрал 30 тыс звезд натхабе.</p>

        <p>Если вы пропустили 20 лет эволюции Microsoft API от EMM386 и Windows 16 до XAML Islands,
           самое время вспомнить про это потому, что речь о терминале. Вообще тот кто сталкивался
           с termio на UNIX вплотную, а не шапочно не мог блевать от архитектуры, но по-своему в духе
           стогкольмского синдрома лелеющий настройки терминалов termdb и прочие сказки динозавров.
           В Linux можно сказать, что референсный терминал, раотающий по спецификациям xterm.
           В Mac все тихо замалчивают проблему, и пользуются iTerm 2, потому как полный набор
           CUA в Apple Terminal не работает, особонно это заметно для польлзователей Midnight Commander.
           Поэтому хотелось увидеть такой терминал от Microsoft в котором одинаково бы звучали
           шифты и контролы с курсорами так нужным нам старым динозаврам с мышечной памятью для
           навигации рептилоидным мозгом. Я работаю в iTerm 2, это самый удобный пока терминал на планете,
           но после использования я захотел сделать короткий write up того что увидел в исходниках,
           возможно молодежь не знает, а деды найдут ошибки и похейтят немного!</p>

        <p>Итак, в Windows 10 существует такой фулл стек из API (Иевангелие от Максима):
           Windows NT, Win32, WinRT. Всё больше нухуя нет. Windows NT — ядро Дейва Кетлера,
           начатое еще в 1988 году, и являющееся вдохновляющем продолжением ОС Mach
           написаной в CMU (я был там!). Win32 — это 32-битное расширение 16-битного
           невытесняющегося ивинтлупа сишных стеков шарящего единое аддресное пространство (!),
           которое даже существовало для DOS/EMM386 под названием Win32s.

        <p>Win32 это публичное API которое было официальным для семейства Windows NT.
           Самая прогрессивная и взрослая система тогда была Windows NT 4.0 Hydra с
           Cytrix стеком, который сохраняет
           приемственность в RDP протоколах и сейчас.
           Это тоже Терминал, но он заслуживает отдельной статьи, там вообще космос счас,
           этот терминал умнее меня, там AI-кодеки для сжатия данных и т.д. Потом после Windows 2000
           был некоторый застой, до рассвета, когда Марк Руссинович пришел в Microsoft и порезал
           KERNEL32.DLL, USE32.DLL и GDI32.DLL на win32-api стек с помощью автоматических анализаторов кода,
           это стало начиная с Windows 7, потом был некий шаток в сторону создания всего и вся на WPF,
           но когда поняли что проблемы с латенси не пофиксать, вернулись на старый добрый COM/ActiveX
           но назвали это WinRT, и скахали что мы работаем со всеми языками. Что нового,
           VBA тоже можно было из джаваскрипта вызывать еще в 2000 году. Сейчас WinRT разделяет
           метанформация прилоежний с CLR стеком, и шарит графический язык и его редакторы типа
           Microsoft Blend, с XAML серирализацией и представляет собой просто COM/DCOM/COM+/OLE/ActiveX
           библиотеку компонент со старыми добрыми IQueryInterface и IUnknown интерфейсами,
           которые кстати были еще в CORBA. DirectX и все системне сервисы тоже использую этот способ линковки,
           там кстати существует IDL компилятор и сериализаторы можно подставлять, покруче ваших протобафов.
           Я это все рассказываю потому, что исходники Microsoft Terminal испольует весь фулстек всех трех API,
           ABI уровня ядра Windows NT, ABI C runtime и Win32 и IDL API для COM-овским компонент
           WinRT и DirectX.
           </p>
        <p>Скажу сразу информации в интернете про Windows Terminal и вообще консольный стек не много,
           почерпнуть информацию можно из имплменетации FAR и MSDN страницы по Console IO, а также
           в двух статьях из корпоративного блога:</p>
           <p>
           — <A HREF="https://devblogs.microsoft.com/commandline/introducing-windows-terminal/">Анонс Windows Terminal Кайлы Синамон</A><br>
           — <A HREF="https://devblogs.microsoft.com/commandline/windows-command-line-introducing-the-windows-pseudo-console-conpty/">Серия постов про PTY API Рича Тёрнера</A>
           </p>
           <p>Традиционно в духе Хелен Кастер приводим список всех кто делал консольный стек в Windows:</p>
         <figure> <img src="https://devblogs.microsoft.com/wp-content/uploads/sites/33/2019/02/Team-Console.png" width=600></figure>
        <p>
        </p>
    </section>
</main>
<footer>Namdak Tonpa <span class="heart">&nbsp;❤&nbsp;</span> 2009—2019</footer>
</body>
</html>
