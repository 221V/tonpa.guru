<html>
<head>
    <meta charset="utf-8"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="description" content=""/>
    <meta name="author" content="Namdak Tonpa"/>
    <title>2019-07-08</title>
    <link rel="stylesheet" href="../../blank.css"/>
</head>
<body>
<nav>
    <a href='../../index.html'>5HT</a>
    <a href='../index.html'>TOP</a>
    <a href='#'>2019-07-08</a>
</nav>
<main>
    <section>
        <h3>Сайнерси Энтерпрайзинг<br>Часть 2. Пусконаладка Предприятия</h3>
        <p>В этой статье я расскажу как мы организовываем данные о самом предприятии
           и как мы совершаем навигаю по ним с помощью библиотеки KVS.</p>

    </section>
    <section>
        <h3>Создание схемы<br>
            Генерация SDK и валидаторов</h3>
        <p>Схемы мы храним в цепочках для каждой таблицы поэтому валиаторы
           способны траверсить и по предыдущих схемах. Схема включает в себя
           всю типовую информацию для таблиц С-структур, которые используются
           в качестве основного типа данных в качесве пейлоада для базы данных.
           Наши драйвера используют BERT кодировку. Все кто писали сложные системы
           согласились с тем, что данные в сторадже должны быть типизированны,
           это потом вы уже можете использовать словари и JSON для транспортировки,
           но валидаторы и генераторы SDK лучше писать по типовым спецификациям.
           </p>

          <p>Другими словами в типовых спецификациях есть суммы и мы можем генерировать
             хоть Haskell спецификации, причем делать это на стадии компиляции.
             Пример набора парс трансформаций для генерации JavaScript, Swift и даже Protobuf
             спецификаций вы можете найти в этой библиотеке:</p>

          <p>— <a href="https://github.com/synrc/bert">synrc/bert</a></p>

          <p>Там же находится генератор валидаторов (его конечно нужно переписать)
             для самого языка Erlang. Почему в поставке языка отсувствует такая
             библиотека — тот ещё вопрос!</p>

        <h4>ERP SPEC — Таблицы организационной структуры</h4>

   <p><font face="monospace" size=4 style="white-space: pre;">
-type locationType() :: normal | extra.

-record('Loc',          { id          = kvs:seq([],[]) :: [] | term(),
                          code        = [] :: [] | term(),
                          country     = [] :: [] | binary(),
                          city        = [] :: [] | binary(),
                          address     = [] :: [] | binary(),
                          type        = [] :: locationType() }).

-record('Branch',       { id          = kvs:seq([],[]) :: [] | term(),
                          loc         = [] :: [] | #'Loc'{} }).

-record('Inventory',    { id          = [] :: [] | binary(),
                          name        = [] :: [] | binary(),
                          branch      = [] :: [] | #'Branch'{},
                          type        = [] :: term() }).

-record('Organization', { name        = [] :: [] | binary(),
                          url         = [] :: [] | string(),
                          location    = [] :: [] | #'Loc'{},
                          type        = [] :: term() }).

-record('Person',       { id          = kvs:seq([],[]) :: [] | term(),
                          cn          = [] :: [] | binary(),
                          name        = [] :: [] | binary(),
                          displayName = [] :: [] | binary(),
                          location    = [] :: #'Loc'{},
                          type        = [] :: term() }).


-record('Employee',     { id          = kvs:seq([],[]) :: [] | binary(),
                          person      = [] :: [] | #'Person'{},
                          org         = [] :: [] | #'Organization'{},
                          branch      = [] :: [] | #'Branch'{},
                          type        = [] :: term() }).
    </font></p>

        <h4>PAY SPEC — Таблицы системы управления платежами</h4>

        <p>Деньги хранятся в формате <b>{N,M}</b>, где <b>N</b> — количество знаков после запятой,
           а <b>M</b> — все значимые цифры. Таким образом числа кодируются множественным образом,
           например единица: 1 = {0,1} = {1,10} = {2,100}. Операция умножения зато в такой системе
           выглядит просто <b>mul({A,B},{C,D}) -> {A+C,B*D}</b>.
           </p>

   <p><font face="monospace" size=4 style="white-space: pre;">
-type fraction_length() :: integer().
-type digits() :: integer().
-type money() :: {fraction_length(),digits()}.


-record('Payment', { invoice = [] :: [] | term(),
                     volume = [] :: [] | money(),
                     price = {0,1} :: money(),
                     instrument = [] :: term(),
                     type = [] :: paymentType(),
                     from = [] :: term(),
                     to = [] :: term() }).
    </font></p>

        <h4>PLM SPEC — Таблицы системы управления жизненным циклом</h4>

   <p><font face="monospace" size=4 style="white-space: pre;">
-record('Acc', { id   = [] :: [] | binary() | list(),
                 rate = {0,0} :: money() }).

-record('Product', { code         = [] :: [] | term(),
                     id           = kvs:seq([],[]) :: [] | binary(),
                     url          = [] :: [] | binary() | list(),
                     engineer     = [] :: [] | #'Person'{},
                     director     = [] :: [] | #'Person'{},
                     owner        = [] :: [] | #'Person'{},
                     organization = [] :: [] | #'Organization'{},
                     type         = [] :: productType() }).

-record('Investment', { id = [] :: [] | term(),
                        volume = [] :: [] | money(),
                        price = {0,1} :: money(),
                        instrument = [] :: term(),
                        type = [] :: investmentType(),
                        from = [] :: term(),
                        to = [] :: term() }).
    </font></p>

    </section>
    <section>
        <h3>Создание корневых цепочек</h3>

        <p>ERP BOOT или пусконаладка преприятия — это процес заполнения первичных
           словарей и таблиц и всякой фундаментальной информации. Главным образом это отображение
           иерархической, организационной структуры предприятия. От работника предприятия, его рабочего места,
           его бренча, его локальной компании все
           бренчи которое находятся в одной стране, и далее до группы международных компании с офисами в разныз странах мира,
           и возможно даже до синдикатов транснациональныз корпораций. В зависимости от того какую
           организационную структуру предприятия вы хотите
           так вы раскладываете данные на первичные фиды.</p>

        <h4>ERP BOOT — Организационная структура предприятия</h4>

        <p>Рассмотрим пример: компания Quanterall, главный подрядчик Aethernity, имеет офисы в
           Софии, Варне (главный офис компании) и Пловдиве. Сама компания совершает операции только в Болгарии,
           поэтому группа состоит из одной компании.</p>

   <p><font face="monospace" size=4 style="white-space: pre;">
GroupOrgs    = [ #'Organization'{name="Quanterall",  url="quanterall.com"} ].
HeadBranches = [ #'Branch'{loc=#'Loc'{city="Varna",  country="BG"}},
                 #'Branch'{loc=#'Loc'{city="Sophia", country="BG"}},
                 #'Branch'{loc=#'Loc'{city="Plovdiv",country="BG"}} ].
    </font></p>

        <p>Добавляем сейчас и впредь данные с помощью обычных list комбинаторов:</p>

   <p><font face="monospace" size=4 style="white-space: pre;">
-module(erp).
-compile(export_all).
boot() ->
    case kvs:get(writer,"/erp/group") of
         {ok,_} -> skip;
         {error,_} ->
             lists:map(fun(X) -> kvs:append(X,"/erp/quanterall") end, HeadBranches),
             lists:map(fun(X) -> kvs:append(X,"/erp/group") end, GroupOrgs) end.
    </font></p>

        <h4>PAY BOOT — Учётность CashFlow</h4>

        <p>Управление отчетностью аутсорс предприятия достаточно простое:
           1) мы принимаем оплаты по инвойсам выставленным клиентам периодически регулярно раз в месяц;
           2) мы выплачиваем зарплаты раз в месяц. Поэтому фолды группируются календарно
           и зипуются помесячно.</p>

   <p><font face="monospace" size=4 style="white-space: pre;">
sal_boot() ->
   lists:map(fun(#'Product'{code=C} = P) ->
      lists:map(fun(#'Payment'{}=Pay) ->
         kvs:append(Pay,"/plm/"++C++"/outcome") end,salaries(C))
      end, products()).

pay_boot() ->
   lists:map(fun(#'Product'{code=C} = P) ->
      lists:map(fun(#'Payment'{}=Pay) ->
         kvs:append(Pay,"/plm/"++C++"/income") end,payments(C))
      end, products()).
    </font></p>

        <h4>PLM BOOT — Бюджетирование проектов</h4>

       <p>Инициализация почасовая для каждого сотрудника по проекту.
          Этот список будет использоваться в будущем для распределения
          выплат по опционам.<b></b> </p>

   <p><font face="monospace" size=4 style="white-space: pre;">
assignees() ->
   lists:map(fun(#'Product'{code=C} = P) ->
      case kvs:get(writer,"/plm/"++C++"/staff") of
           {error,_} -> lists:map(fun(#'Person'{}=Person) ->
                        kvs:append(Person,"/plm/"++C++"/staff") end,staff(C));
           {ok,_} -> skip end
      end, products()).
    </font></p>

    <p>Выплаты по процентам на субконто попроектно:</p>

   <p><font face="monospace" size=4 style="white-space: pre;">
accounts() ->
  lists:map(fun(#'Product'{code=C}) ->
    lists:map(fun(#'Acc'{id=Id, rate=R}=SubAcc) ->
      Address = lists:concat(["/fin/acc/",C]),
      kvs:append(SubAcc,Address),
      Feed = lists:concat(["/fin/tx/",Id]),
      case kvs:get(writer, Feed) of
           {error,_} -> lists:map(fun(#'Payment'{invoice=I,price=P, volume=V}=Pay) ->
                        kvs:append(rate(Pay,SubAcc,C), Feed) end, payments(C));
             {ok,_} -> skip
      end
    end, acc(C))
  end, plm_boot:products()).
    </font></p>

        <p>За работу с данными отвечает библиотека KVS, как работать с ней читайте в предыдущих
           выпусках журнала:</p>
          <p>— <a href="https://tonpa.guru/stream/2019/2019-04-13%20Новая%20версия%20KVX.htm">2019-04-13 Новая Версия KVS</a><br>
          — <a href="https://github.com/synrc/kvs">synrc/kvs</a></p>
    </section>
    <section>
        <h3>Инкапсуляция структуры предприятия</h3>
        <p>Весь код который нужен для создания фидов мы обычно выносим в приложение с названием
           ERP. Для каждого конкретного предприятия мы используем свою Github
           организацию, можно даже другое имя репозитория, но всегда это же имя Erlang/OTP
           приложления.</p>
          <p>— <a href="https://github.com/enterprizing/erp">enterprizing/erp</a></p>
        <p>В этом репозитории будут всегда какие-то реальные данные компании которую мы автоматизируем,
           если она нам разрешает публиковать свою организационную структуру, первичные данные и словари.
           Делаем этот репозиторий приватный в отдельных случаях. Сами приложения способны
           работать с любыми структурами ERP.</p>
    </section>
    <section>
        <h3>Пример</h3>

        <p>Elixir прелюдия:</p>

   <p><font face="monospace" size=4 style="white-space: pre;">
defmodule PLM.Mixfile do
  use Mix.Project
  def project() do
    [
      app: :plm,
      version: "0.7.1",
      elixir: "~> 1.8.1",
      description: "PLM Product Lifecycle Management",
      deps: [{:bpe, "~> 4.7.3"}, {:erp, "~> 0.7.6"}]
    ]
  end
  def application(),
    do: [mod: {PLM.Application, []},
         applications: [:rocksdb, :kvs, :bpe, :erp]]
end
    </font></p>

        <p>Содержимое корневой директории БД предприятия:</p>

   <p><font face="monospace" size=4 style="white-space: pre;">
>  :writer |> :kvs.all |> :lists.sort
[
  {:writer, '/acc/quanterall/Plovdiv', 3, [], [], []},
  {:writer, '/acc/quanterall/Sophia', 9, [], [], []},
  {:writer, '/acc/quanterall/Varna', 23, [], [], []},
  {:writer, '/bpe/hist/1562855060639704000', 1, [], [], []},
  {:writer, '/bpe/proc', 1, [], [], []},
  {:writer, '/erp/group', 1, [], [], []},
  {:writer, '/erp/partners', 7, [], [], []},
  {:writer, '/erp/quanterall', 3, [], [], []},
  {:writer, '/fin/acc/CATALX', 4, [], [], []},
  {:writer, '/fin/acc/NYNJA', 4, [], [], []},
  {:writer, '/fin/tx/CATALX/R&D', 12, [], [], []},
  {:writer, '/fin/tx/CATALX/insurance', 12, [], [], []},
  {:writer, '/fin/tx/CATALX/options', 12, [], [], []},
  {:writer, '/fin/tx/CATALX/reserved', 12, [], [], []},
  {:writer, '/fin/tx/NYNJA/R&D', 5, [], [], []},
  {:writer, '/fin/tx/NYNJA/insurance', 5, [], [], []},
  {:writer, '/fin/tx/NYNJA/options', 5, [], [], []},
  {:writer, '/fin/tx/NYNJA/reserved', 5, [], [], []},
  {:writer, '/plm/CATALX/income', 12, [], [], []},
  {:writer, '/plm/CATALX/investments', 4, [], [], []},
  {:writer, '/plm/CATALX/outcome', 12, [], [], []},
  {:writer, '/plm/CATALX/staff', 2, [], [], []},
  {:writer, '/plm/NYNJA/income', 5, [], [], []},
  {:writer, '/plm/NYNJA/investments', 2, [], [], []},
  {:writer, '/plm/NYNJA/outcome', 5, [], [], []},
  {:writer, '/plm/NYNJA/staff', 4, [], [], []},
  {:writer, '/plm/products', 2, [], [], []}
]
    </font></p>

        <p>Список компаний входящие в группу предприяти:</p>

   <p><font face="monospace" size=4 style="white-space: pre;">
> :kvs.feed '/erp/group'
[{:Organization, 'Quanterall', 'quanterall.com', [], []}]
    </font></p>

        <p>Список бреч-офисов головной (и единственной) компании группы:</p>

   <p><font face="monospace" size=4 style="white-space: pre;">
> :kvs.feed '/erp/quanterall'
[
  {:Branch, '1562329445378242000',
   {:Loc, '1562329445378243000', [], 'BG', 'Plovdiv', [], []}},
  {:Branch, '1562329445378241000',
   {:Loc, '1562329445378242000', [], 'BG', 'Sophia', [], []}},
  {:Branch, '1562329445378234000',
   {:Loc, '1562329445378240000', [], 'BG', 'Varna', [], []}}
]
    </font></p>

        <p>Список контрагентнов:</p>

   <p><font face="monospace" size=4 style="white-space: pre;">
> :kvs.feed '/erp/partners'
[
  {:Organization, 'Catalx Exchange Inc.', 'catalx.io', [], []},
  {:Organization, 'HistoricalPark', [], [], []},
  {:Organization, 'NYNJA, Inc.', 'nynja.io', [], []},
  {:Organization, 'Intralinks', [], [], []},
  {:Organization, 'SwissEMX', [], [], []},
  {:Organization, 'FiaTech', [], [], []},
  {:Organization, '3Stars', [], [], []}
]
    </font></p>
    </section>
</main>
<footer>Namdak Tonpa <span class="heart">&nbsp;❤&nbsp;</span> 2009—2019</footer>
</body>
</html>
