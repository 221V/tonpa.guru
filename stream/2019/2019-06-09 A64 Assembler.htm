<html>
<head>
    <meta charset="utf-8"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="description" content=""/>
    <meta name="author" content="Namdak Tonpa"/>
    <title>2019-06-09</title>
    <link rel="stylesheet" href="../../blank.css"/>
</head>
<body>
<nav>
    <a href='../../index.html'>5HT</a>
    <a href='../index.html'>TOP</a>
    <a href='#'>2019-06-09</a>
</nav>
<main>
    <section>
        <h3>A64 ASM</h3>

        <p>Сегодня мы напишем минимальный ассемблер для компиляции объектного кода,
           который получается на выходе clang от компиляции C-шной программы Hello World.</p>

        <p>Возможно первый формальный гипервизор который будет написан на Эрланге или на подобии Эрланга
           будет написан с использованием этого ассеблера. Как вы знаете LLVM совершенно не поддаётся
           нужнам верификации так как его спецификация очень громоздкая. Гланая мотивация этой работы
           снизить количественные рамки формализации ассемблирования. Благодаря встроенному синтаксису Эрланга
           для работы с битовыми строками задача конструирования 32-битной инструкции из набора битовых
           строк перемнной длинны не составляет труда и может быть легко формализирована в MLTT языках.</p>

        <p>Таким образом мы убегаем от пробелемы верифакации компилятора и переносим всю работу
           по оптимизации и дизайну на авторов библиотеки, которые будут строить свои функции используя
           компиляцию в формальный ассемблер. Такой подход в использовании MLTT язка как макросистемы
           для компилировать один из перспективных методов формальной верификации, который в отличие от VST
           и других сложных путей верификации, позволяет насладится минималистичностью и по дороге убрать
           все ненужные слои абстрации включая MIR и LLVM и использовать векторную компиляция в NEON как
           это формально делает система Spiral, только намного лайтовее.</p>

        <p>Начнём с простого, с Hello World:</p>
        <figure><code>
 #include &lt;stdio.h&gt;
 int main( ) {
     printf("Hello, world!\n");
 }
        </code></figure>
        <p>Откомпилируем это под ARM64 на вашем Macbook и посмотрим, что получилось:</p>
        <figure><code>
 $ clang -isysroot $(xcrun --sdk iphoneos --show-sdk-path) \
         -arch arm64 asm.c -o asm.o
        </code></figure>
        <p>Ассемблеровский текст результата (без меток, адресов и хекса) сохраняем в фафл asm.s.</p>
        <figure><code>
 $ objdump -disassemble asm.o

 _main:
 100007f40:  ff 83 00 d1     sub sp, sp, #32
 100007f44:  fd 7b 01 a9     stp x29, x30, [sp, #16]
 100007f48:  fd 43 00 91     add x29, sp, #16
 100007f4c:  08 00 00 90     adrp    x8, #0
 100007f50:  08 a1 3e 91     add x8, x8, #4008
 100007f54:  00 00 80 52     mov w0, #0
 100007f58:  a0 c3 1f b8     stur    w0, [x29, #-4]
 100007f5c:  e0 03 08 aa     mov x0, x8
 100007f60:  06 00 00 94     bl  #24 &lt;dyld_stub_binder+0x100007f78&gt;
 100007f64:  a9 c3 5f b8     ldur    w9, [x29, #-4]
 100007f68:  e0 03 09 aa     mov x0, x9
 100007f6c:  fd 7b 41 a9     ldp x29, x30, [sp, #16]
 100007f70:  ff 83 00 91     add sp, sp, #32
 100007f74:  c0 03 5f d6     ret
        </code></figure>
        <p>Хотим в распарсаном виде иметь такой стрим (в основном всё из атомов,
           так как они меньше всего загрязняют эрланг синтаксис):</p>
        <figure><code>
 [{sub,sp,sp,32},
  {stp,x29,x30,[sp,16]},
  {add,x29,sp,16},
  {adrp,x8,0}
  {add,x8,x8,4008},
  {mov,w0,0},
  {stur,w0,[x29,-4]},
  {mov,x0,x8}
  {bl,[24,'0x100007f78']},
  {ldur,w9,[x29,-4]},
  {mov,x0,x9},
  {ldp,x29,x30,[sp,16]},
  {add,sp,sp,32}
  {ret}]
        </code></figure>
         <p>Попробуем написать парсер этого асм стрима:</p>
        <figure><code>
 atom("#"++X) -> list_to_integer(X);
 atom(X)      -> list_to_atom(X).

 last(X,Y,A)  ->
   case lists:reverse(X) of
      "]"++Z -> [lists:reverse([atom(lists:reverse(Z))|Y])|A];
           _ -> {[atom(X)|Y],A} end.

 code(Bin) ->
   [ lists:reverse(
     lists:foldl(
       fun([$[|X],A) -> last(X,[],A);
          (X,{Y,A}) -> last(X,Y,A);
          (X,A) -> [atom(X)|A] end,[],string:tokens(C," ,")))
    || C <- string:tokens(binary_to_list(Bin),"\n") ].

 compile(Code) ->
   {0,iolist_to_binary([ success(?MODULE,hd(I),tl(I)) || I <- Code])}.
        </code></figure>
        <p>Теперь представим как выглядит компиляция первых
           инструкций (для 32-битных и 64-битных регистров). Приводим тут только кейс
           для 64-битных регистров, но в файл аккуратно вкатываем всю доку (в предыдущей
           статье 60МБ-документ):</p>
        <figure><code>
 stur(R1,[R2,Im]) when ?x(R1), ?x(R2), ?imm(Im) ->
   Rt = reg(R1), Rn = reg(R2), I = &lt;&lt;Im:9&gt;&gt;,
   <<3:2,7:3,0:6,I/bitstring,0:2,Rn/bitstring,Rt/bitstring>>;

 mov(R1,Im) when ?x(R1), ?imm(Im) ->
   R = reg(R1), I = &lt;&lt;Im:16&gt;&gt;,
   <<1:1,2:2,37:6,0:2,I/bitstring,R/bitstring>>;

 adrp(R1,Im) when ?x(R1), ?imm(Im) ->
   Dst = reg(R1), I = &lt;&lt;(Im bsr 2):19&gt;&gt;, J = &lt;&lt;Im:2&gt;&gt;,
   <<1:1,J:2/bitstring,16:5,I:19/bitstring,Dst:5/bitstring>>.

 sub(R1,R2,Im) when ?x(R1), ?x(R2), ?imm(Im) ->
   Dst = reg(R1), Src = reg(R2), I = &lt;&lt;Im:12&gt;&gt;,
   <<1:1,1:1,0:1,34:6,0:1,I/bitstring,Src/bitstring,Dst/bitstring>>;

 add(R1,R2,Im) when ?x(R1), ?x(R2), ?imm(Im) ->
   Dst = reg(R1), Src = reg(R2), I = &lt;&lt;Im:12&gt;&gt;,
   <<1:1,0:1,0:1,34:6,0:1,I/bitstring,Src/bitstring,Dst/bitstring>>;

 stp(R1,R2,[R3,Im]) when ?x(R1), ?x(R2), ?x(R3), ?imm(Im) ->
   Dst = reg(R1), Src = reg(R2), Rn = reg(R3), I = &lt;&lt;(Im div 8):7&gt;&gt;,
   <<2:2,5:3,0:1,2:3,0:1,I/bitstring,Src/bitstring,Rn/bitstring,Dst/bitstring>>;
        </code></figure>
        <p>Любая армовская инструкция занимает ровно 3 строчки: 1) параметры и матчинг;
        2) декодирование литералов; 3) составление схемы битвектора. Я сделал так,
        что те инструкции которые пока не поддерживаются тихо фейлятся (success,
        для громкого фейла включите success_):</p>
        <figure><code>
 $ ./a64 asm.s
 $ hexdump asm
 0000000 d1 00 83 ff a9 01 7b fd 91 00 43 fd 90 00 00 08
 0000010 91 3e a1 08 52 80 00 00 b8 1f c3 a0 91 00 83 ff
        </code></figure>
        <p>— <a href="https://github.com/5HT/a64">5HT/a64</a><br></p>

    <h3>APPENDIX A</h3>
 
       <p>Here are A64 ISA main 154 cases:</p>

        <p><font face="monospace" size=3>
 <b>0 0 0 0 0 0 0 0 0 0 0 % C6.2.312 UDF</b><br>
 <b>0 x 0 0 1 0 0 0 0 0 0 % C6.2.286 STXRB % C6.2.253 STLXRB % C6.2.254 STLXRH</b><br>
 0 x 0 0 1 0 0 0 0 i 1 % C6.2.039 CASP, CASPA, CASPAL, CASPL<br>
 0 x 0 0 1 0 0 0 0 1 0 % C6.2.106 LDAXRH % C6.2.105 LDAXRB % C6.2.163 LDXRB<br>
 0 0 0 0 1 0 0 0 1 0 0 % C6.2.246 STLRB<br>
 0 0 0 0 1 0 0 0 1 1 0 % C6.2.101 LDARB % C6.2.113 LDLARB<br>
 0 0 0 0 1 0 0 0 1 0 0 % C6.2.242 STLLRB % C6.2.243 STLLRH<br>
 0 0 0 0 1 0 0 0 1 i 1 % C6.2.037 CASB, CASAB, CASALB, CASLB<br>
 0 1 0 0 1 0 0 0 0 1 0 % C6.2.164 LDXRH<br>
 0 1 0 0 1 0 0 0 1 0 0 % C6.2.247 STLRH<br>
 0 1 0 0 1 0 0 0 1 1 0 % C6.2.102 LDARH % C6.2.114 LDLARH<br>
 0 1 0 0 1 0 0 0 1 i 1 % C6.2.038 CASH, CASAH, CASALH, CASLH<br>
 0 1 1 0 1 0 0 i i 1 _ % C6.2.118 LDPSW<br>
 x 0 0 0 1 0 1 0 s s 0 % C6.2.012 AND (shifted register)<br>
 x 0 0 0 1 0 1 0 s s 1 % C6.2.029 BIC (shifted register)<br>
 x 0 0 0 1 0 1 1 0 0 1 % C6.2.001 ADC % C6.2.003 ADD (extended register)<br>
 x 0 0 0 1 0 1 1 s s 0 % C6.2.005 ADD (shifted register)<br>
 x 0 1 0 1 0 0 0 0 0 _ % C6.2.255 STNP<br>
 x 0 1 0 1 0 0 0 0 1 _ % C6.2.116 LDNP<br>
 x 0 1 0 1 0 0 0 1 0 _ % C6.2.256 STP<br>
 x 0 1 0 1 0 0 0 1 1 _ % C6.2.117 LDP<br>
 x 0 1 0 1 0 1 0 0 0 0 % C6.2.177 MOV (register)<br>
 x 0 1 0 1 0 1 0 s s 1 % C6.2.186 MVN % C6.2.192 ORN (shifted register)<br>
 x 0 1 0 1 0 1 1 0 0 1 % C6.2.006 ADDS (extended register) % C6.2.53 CMN (extended register)<br>
 x 0 1 0 1 0 1 1 s s 0 % C6.2.008 ADDS (shifted register) % C6.2.55 CMN (shifted register)<br>
 x 1 0 0 1 0 1 0 s s 0 % C6.2.078 EOR (shifted register)<br>
 x 1 0 0 1 0 1 0 s s 1 % C6.2.076 EON (shifted register)<br>
 x 1 0 0 1 0 1 1 0 0 1 % C6.2.288 SUB (extended register)<br>
 x 1 0 0 1 0 1 1 s s 0 % C6.2.290 SUB (shifted register) % C6.2.187 NEG (shifted register)<br>
 x 1 1 0 1 0 1 0 s s 0 % C6.2.014 ANDS (shifted register) % C6.2.308 TST (shifted register)<br>
 x 1 1 0 1 0 1 0 s s 1 % C6.2.030 BICS (shifted register)<br>
 x 1 1 0 1 0 1 1 0 0 1 % C6.2.056 CMP (extended register) % C6.2.291 SUBS (extended register)<br>
 x 1 1 0 1 0 1 1 s s 0 % C6.2.058 CMP (shifted register) % C6.2.293 SUBS (shifted register) % C6.2.188 NEGS<br>
 1 x 0 0 1 0 0 0 0 0 0 % C6.2.252 STLXR % C6.2.285 STXR<br>
 1 x 0 0 1 0 0 0 0 0 1 % C6.2.251 STLXP % C6.2.284 STXP<br>
 1 x 0 0 1 0 0 0 0 1 0 % C6.2.104 LDAXR % C6.2.162 LDXR<br>
 1 x 0 0 1 0 0 0 0 1 1 % C6.2.103 LDAXP % C6.2.161 LDXP<br>
 1 x 0 0 1 0 0 0 1 0 0 % C6.2.244 STLLR % C6.2.245 STLR<br>
 1 x 0 0 1 0 0 0 1 1 0 % C6.2.100 LDAR % C6.2.115 LDLAR<br>
 1 x 0 0 1 0 0 0 1 i 1 % C6.2.040 CAS, CASA, CASAL, CASL<br>
 <b>x 0 0 1 0 0 0 1 0 s _ % C6.2.004 ADD (immediate) % C6.2.173 MOV (to/from SP)</b><br>
 x 0 0 1 0 0 1 0 0 n _ % C6.2.011 AND (immediate)<br>
 x 0 0 1 0 0 1 0 1 h w % C6.2.174 MOV (inverted wide immediate) % C6.2.179 MOVN<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.221 SBFX % C6.2.298 SXTB % C6.2.299 SXTH % C6.2.300 SXTW<br>
 x 0 0 1 0 0 1 1 0 n _ % C6.2.016 ASR (immediate) % C6.2.219 SBFIZ % C6.2.220 SBFM<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.221 SBFX % C6.2.298 SXTB % C6.2.299 SXTH % C6.2.300 SXTW<br>
 x 0 0 1 0 0 1 1 1 n 0 % C6.2.082 EXTR % C6.2.214 ROR (immediate)<br>
 x 0 1 1 0 0 0 1 0 s _ % C6.2.007 ADDS (immediate) % C6.2.54 CMN (immediate)<br>
 x 0 1 1 0 0 1 0 0 n _ % C6.2.176 MOV (bitmask immediate) % C6.2.193 ORR (immediate)<br>
 x 0 1 1 0 0 1 1 0 n _ % C6.2.025 BFC % C6.2.26 BFI % C6.2.27 BFM % C6.2.28 BFXIL<br>
 x i i 1 0 0 0 0 _ _ _ % C6.2.009 ADR % C6.2.010 ADRP<br>
 x 1 0 1 0 0 0 1 0 s _ % C6.2.289 SUB (immediate)<br>
 x 1 0 1 0 0 1 0 0 n _ % C6.2.077 EOR (immediate)<br>
 x 1 0 1 0 0 1 0 1 h w % C6.2.175 MOV (wide immediate) % C6.2.180 MOVZ<br>
 x 1 0 1 0 0 1 1 0 n _ % C6.2.166 LSL (immediate) % C6.2.169 LSR (immediate) % C6.2.309 UBFIZ % C6.2.310 UBFM <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.311 UBFX % C6.2.319 UXTB % C6.2.320 UXTH<br>
 x 1 1 1 0 0 0 1 0 s _ % C6.2.057 CMP (immediate) % C6.2.292 SUBS (immediate)<br>
 x 1 1 1 0 0 1 0 0 n _ % C6.2.013 ANDS (immediate) % C6.2.307 TST (immediate)<br>
 x 1 1 1 0 0 1 0 1 h w % C6.2.178 MOVK<br>
<b> 0 0 0 1 0 1 _ _ _ _ _ % C6.2.024 B</b><br>
 1 0 0 1 0 1 _ _ _ _ _ % C6.2.031 BL<br>
 0 1 0 1 0 1 0 0 _ _ _ % C6.2.023 B.cond<br>
 x 0 1 1 0 1 0 0 _ _ _ % C6.2.042 CBZ<br>
 x 0 1 1 0 1 0 1 _ _ _ % C6.2.041 CBNZ<br>
 x 0 1 1 0 1 1 0 _ _ _ % C6.2.304 TBZ<br>
 x 0 1 1 0 1 1 1 _ _ _ % C6.2.303 TBNZ<br>
 1 1 0 1 0 1 0 0 0 0 0 % C6.2.085 HVC % C6.2.227 SMC % C6.2.294 SVC<br>
 1 1 0 1 0 1 0 0 0 0 1 % C6.2.036 BRK<br>
 1 1 0 1 0 1 0 0 0 1 0 % C6.2.084 HLT<br>
 1 1 0 1 0 1 0 0 1 0 1 % C6.2.070 DCPS1 % C6.2.071 DCPS2 % C6.2.072 DCPS3 % C6.2.073 DMB<br>

 1 1 0 1 0 1 0 1 0 0 0 % C6.2.018 AT % C6.2.047 CFINV % C6.2.050 CLREX<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.021 AUTIA, AUTIA1716, AUTIASP, AUTIAZ, AUTIZA<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.022 AUTIB, AUTIB1716, AUTIBSP, AUTIBZ, AUTIZB<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.062 CSDB % C6.2.069 DC % C6.2.075 DSB % C6.2.081 ESB<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.083 HINT % C6.2.086 IC % C6.2.087 ISB % C6.2.182 MSR (immediate)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.183 MSR (register) % C6.2.198 PACIA, PACIA1716, PACIASP, PACIAZ, PACIZA<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.204 PSB CSYNC % C6.2.205 PSSBB % C6.2.224 SEV % C6.2.225 SEVL <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.232 SSBB % C6.2.301 SYS % C6.2.305 TLBI % C6.2.306 TSB CSYNC<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.321 WFE % C6.2.322 WFI % C6.2.324 YIELD % C6.2.191 NOP<br>
 1 1 0 1 0 1 0 1 0 0 1 % C6.2.181 MRS % C6.2.302 SYSL<br>
 1 1 0 1 0 1 1 0 0 0 0 % C6.2.034 BR<br>
 1 1 0 1 0 1 1 0 0 0 1 % C6.2.032 BLR<br>
 1 1 0 1 0 1 1 0 0 1 0 % C6.2.207 RET % C6.2.208 RETAA, RETAB<br>
 1 1 0 1 0 1 1 0 1 0 0 % C6.2.079 ERET % C6.2.080 ERETAA, ERETAB<br>
 1 1 0 1 0 1 1 0 1 0 1 % C6.2.074 DRPS<br>
 1 1 0 1 0 1 1 z 0 0 0 % C6.2.035 BRAA, BRAAZ, BRAB, BRABZ<br>
 1 1 0 1 0 1 1 z 0 0 1 % C6.2.033 BLRAA, BLRAAZ, BLRAB, BLRABZ<br>
<b>
 0 x 0 1 1 0 0 0 _ _ _ % C6.2.120 LDR (literal)</b><br>
 0 0 0 1 1 0 0 1 0 0 0 % C6.2.249 STLURB<br>
 0 0 0 1 1 0 0 1 0 1 0 % C6.2.095 LDAPURB<br>
 0 0 0 1 1 0 0 1 1 i 0 % C6.2.097 LDAPURSB<br>
 0 0 1 1 1 0 0 0 0 0 0 % C6.2.273 STTRB % C6.2.282 STURB<br>
 0 0 1 1 1 0 0 0 0 0 1 % C6.2.260 STRB (register)<br>
 0 0 1 1 1 0 0 0 0 1 0 % C6.2.144 LDTRB % C6.2.156 LDURB<br>
 0 0 1 1 1 0 0 0 0 1 1 % C6.2.124 LDRB (register)<br>
 0 0 1 1 1 0 0 0 1 0 1 % C6.2.092 LDAPRB<br>
 0 0 1 1 1 0 0 0 1 i 1 % C6.2.128 LDRSB (register)<br>
 0 0 1 1 1 0 0 0 1 x 0 % C6.2.146 LDTRSB % C6.2.158 LDURSB<br>
 0 0 1 1 1 0 0 0 a r 1 % C6.2.088 LDADDB, LDADDAB, LDADDALB, LDADDLB % C6.2.233 STADDB, STADDLB<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.107 LDCLRB, LDCLRAB, LDCLRALB, LDCLRLB % C6.2.236 STCLRB, STCLRLB<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.110 LDEORB, LDEORAB, LDEORALB, LDEORLB % C6.2.239 STEORB, STEORLB<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.134 LDSETB, LDSETAB, LDSETALB, LDSETLB % C6.2.263 STSETB, STSETLB<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.137 LDSMAXB, LDSMAXAB, LDSMAXALB, LDSMAXLB % C6.2.266 STSMAXB, STSMAXLB<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.140 LDSMINB, LDSMINAB, LDSMINALB, LDSMINLB % C6.2.269 STSMINB, STSMINLB<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.149 LDUMAXB, LDUMAXAB, LDUMAXALB, LDUMAXLB % C6.2.275 STUMAXB, STUMAXLB<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.152 LDUMINB, LDUMINAB, LDUMINALB, LDUMINLB % C6.2.278 STUMINB, STUMINLB<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.295 SWPB, SWPAB, SWPALB, SWPLB<br>
 0 0 1 1 1 0 0 i 0 0 _ % C6.2.259 STRB (immediate)<br>
 0 0 1 1 1 0 0 i 0 1 i % C6.2.123 LDRB (immediate)<br>
 0 0 1 1 1 0 0 i 1 i i % C6.2.127 LDRSB (immediate)<br>
 0 0 1 1 1 0 1 0 0 0 0 % C6.2.223 SETF8, SETF16<br>
 0 1 0 1 1 0 0 1 0 0 0 % C6.2.250 STLURH<br>
 0 1 0 1 1 0 0 1 0 1 0 % C6.2.096 LDAPURH<br>
 0 1 0 1 1 0 0 1 1 i 0 % C6.2.098 LDAPURSH<br>
 0 1 1 1 1 0 0 0 0 0 0 % C6.2.274 STTRH<br>
 0 1 1 1 1 0 0 0 0 0 0 % C6.2.283 STURH<br>
 0 1 1 1 1 0 0 0 0 0 1 % C6.2.262 STRH (register)<br>
 0 1 1 1 1 0 0 0 0 1 0 % C6.2.145 LDTRH<br>
 0 1 1 1 1 0 0 0 0 1 0 % C6.2.157 LDURH<br>
 0 1 1 1 1 0 0 0 0 1 1 % C6.2.126 LDRH (register)<br>
 0 1 1 1 1 0 0 0 1 0 1 % C6.2.093 LDAPRH<br>
 0 1 1 1 1 0 0 0 1 x 0 % C6.2.147 LDTRSH<br>
 0 1 1 1 1 0 0 0 1 x 0 % C6.2.159 LDURSH<br>
 0 1 1 1 1 0 0 0 1 x 1 % C6.2.130 LDRSH (register)<br>
 0 1 1 1 1 0 0 0 a r 1 % C6.2.089 LDADDH, LDADDAH, LDADDALH, LDADDLH % C6.2.234 STADDH, STADDLH<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.108 LDCLRH, LDCLRAH, LDCLRALH, LDCLRLH % C6.2.237 STCLRH, STCLRLH<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.111 LDEORH, LDEORAH, LDEORALH, LDEORLH % C6.2.240 STEORH, STEORLH<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.135 LDSETH, LDSETAH, LDSETALH, LDSETLH % C6.2.264 STSETH, STSETLH<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.138 LDSMAXH, LDSMAXAH, LDSMAXALH, LDSMAXLH % C6.2.267 STSMAXH, STSMAXLH<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.141 LDSMINH, LDSMINAH, LDSMINALH, LDSMINLH % C6.2.270 STSMINH, STSMINLH<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.150 LDUMAXH, LDUMAXAH, LDUMAXALH, LDUMAXLH % C6.2.276 STUMAXH, STUMAXLH<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.153 LDUMINH, LDUMINAH, LDUMINALH, LDUMINLH % C6.2.279 STUMINH, STUMINLH<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.296 SWPH, SWPAH, SWPALH, SWPLH<br>
 0 1 1 1 1 0 0 i 0 0 _ % C6.2.261 STRH (immediate)<br>
 0 1 1 1 1 0 0 i 0 1 i % C6.2.125 LDRH (immediate)<br>
 0 1 1 1 1 0 0 i 1 x i % C6.2.129 LDRSH (immediate)<br>
 x 0 0 1 1 0 1 0 1 0 0 % C6.2.048 CINC % C6.2.66 CSINC % C6.2.64 CSET<br>
 x 0 0 1 1 0 1 0 1 0 0 % C6.2.063 CSEL<br>
 x 0 0 1 1 0 1 0 1 1 0 % C6.2.015 ASR (register) % C6.2.17 ASRV % C6.2.060 CRC32B, CRC32H, CRC32W, CRC32X<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.061 CRC32CB, CRC32CH, CRC32CW, CRC32CX<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.165 LSL (register) % C6.2.167 LSLV % C6.2.168 LSR (register) % C6.2.170 LSRV<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.215 ROR (register) % C6.2.216 RORV % C6.2.222 SDIV % C6.2.313 UDIV<br>

 x 0 0 1 1 0 1 1 0 0 0 % C6.2.171 MADD % C6.2.185 MUL % C6.2.172 MNEG % C6.2.184 MSUB<br>
 x 0 1 1 1 0 1 0 0 0 0 % C6.2.002 ADCS<br>
 x 0 1 1 1 0 1 0 0 1 0 % C6.2.043 CCMN (immediate) % C6.2.044 CCMN (register)<br>
 x 1 0 1 1 0 1 0 0 0 0 % C6.2.189 NGC % C6.2.217 SBC<br>
 x 1 0 1 1 0 1 0 1 0 0 % C6.2.049 CINV % C6.2.65 CSETM % C6.2.67 CSINV<br>
 x 1 0 1 1 0 1 0 1 0 0 % C6.2.059 CNEG % C6.2.68 CSNEG<br>
 x 1 0 1 1 0 1 0 1 1 0 % C6.2.051 CLS<br>
 x 1 0 1 1 0 1 0 1 1 0 % C6.2.052 CLZ<br>
 x 1 0 1 1 0 1 0 1 1 0 % C6.2.206 RBIT<br>
 x 1 0 1 1 0 1 0 1 1 0 % C6.2.209 REV % C6.2.210 REV16 % C6.2.212 REV64<br>
 x 1 1 1 1 0 1 0 0 0 0 % C6.2.190 NGCS % C6.2.218 SBCS<br>
 x 1 1 1 1 0 1 0 0 1 0 % C6.2.045 CCMP (immediate) % C6.2.046 CCMP (register)<br>
 1 0 0 1 1 0 0 0 _ _ _ % C6.2.132 LDRSW (literal)<br>
 1 0 0 1 1 0 0 1 1 0 0 % C6.2.099 LDAPURSW<br>
 1 0 0 1 1 0 1 0 1 1 0 % C6.2.197 PACGA<br>
 1 0 0 1 1 0 1 1 0 0 1 % C6.2.226 SMADDL % C6.2.231 SMULL % C6.2.228 SMNEGL % C6.2.229 SMSUBL<br>
 1 0 0 1 1 0 1 1 0 1 0 % C6.2.230 SMULH<br>
 1 0 0 1 1 0 1 1 1 0 1 % C6.2.314 UMADDL % C6.2.318 UMULL % C6.2.315 UMNEGL % C6.2.316 UMSUBL<br>
 1 0 0 1 1 0 1 1 1 1 0 % C6.2.317 UMULH<br>
 1 0 1 1 1 0 0 0 1 0 0 % C6.2.148 LDTRSW % C6.2.160 LDURSW<br>
 1 0 1 1 1 0 0 i 1 0 i % C6.2.131 LDRSW (immediate) % C6.2.133 LDRSW (register)<br>
 1 0 1 1 1 0 1 0 0 0 0 % C6.2.213 RMIF<br>
 1 x 0 1 1 0 0 1 0 0 0 % C6.2.248 STLUR<br>
 1 x 0 1 1 0 0 1 0 1 0 % C6.2.094 LDAPUR<br>
 1 x 1 1 1 0 0 0 0 0 0 % C6.2.272 STTR % C6.2.281 STUR<br>
 1 x 1 1 1 0 0 0 0 0 1 % C6.2.258 STR (register)<br>
 1 x 1 1 1 0 0 0 0 1 0 % C6.2.143 LDTR % C6.2.155 LDUR<br>
 1 x 1 1 1 0 0 0 0 1 1 % C6.2.121 LDR (register)<br>
 1 x 1 1 1 0 0 0 1 0 1 % C6.2.091 LDAPR<br>
 1 x 1 1 1 0 0 0 a r 1 % C6.2.090 LDADD, LDADDA, LDADDAL, LDADDL % C6.2.235 STADD, STADDL<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.109 LDCLR, LDCLRA, LDCLRAL, LDCLRL % C6.2.238 STCLR, STCLRL<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.112 LDEOR, LDEORA, LDEORAL, LDEORL % C6.2.241 STEOR, STEORL<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.136 LDSET, LDSETA, LDSETAL, LDSETL % C6.2.265 STSET, STSETL<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.139 LDSMAX, LDSMAXA, LDSMAXAL, LDSMAXL % C6.2.268 STSMAX, STSMAXL<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.142 LDSMIN, LDSMINA, LDSMINAL, LDSMINL % C6.2.271 STSMIN, STSMINL<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.151 LDUMAX, LDUMAXA, LDUMAXAL, LDUMAXL % C6.2.277 STUMAX, STUMAXL<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.154 LDUMIN, LDUMINA, LDUMINAL, LDUMINL % C6.2.280 STUMIN, STUMINL<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.297 SWP, SWPA, SWPAL, SWPL<br>
 1 x 1 1 1 0 0 i 0 0 _ % C6.2.257 STR (immediate)<br>
 1 x 1 1 1 0 0 i 0 1 i % C6.2.119 LDR (immediate)<br>
 1 1 0 1 1 0 0 0 _ _ _ % C6.2.201 PRFM (literal)<br>
 1 1 0 1 1 0 1 0 1 1 0 % C6.2.019 AUTDA, AUTDZA % C6.2.020 AUTDB, AUTDZB<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.021 AUTIA, AUTIA1716, AUTIASP, AUTIAZ, AUTIZA<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.022 AUTIB, AUTIB1716, AUTIBSP, AUTIBZ, AUTIZB<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.195 PACDA, PACDZA % C6.2.196 PACDB, PACDZB<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;% C6.2.211 REV32 % C6.2.323 XPACD, XPACI, XPACLRI<br>
 1 1 0 1 1 0 1 0 1 1 1 % C6.2.199 PACIB, PACIB1716, PACIBSP, PACIBZ, PACIZB<br>
 1 1 1 1 1 0 0 0 1 0 0 % C6.2.203 PRFUM<br>
 1 1 1 1 1 0 0 0 1 0 1 % C6.2.202 PRFM (register)<br>
 1 1 1 1 1 0 0 0 m s 1 % C6.2.122 LDRAA, LDRAB<br>
 1 1 1 1 1 0 0 0 1 0 0 % C6.2.203 PRFUM<br>
 1 1 1 1 1 0 0 0 1 0 1 % C6.2.202 PRFM (register)<br>
 1 1 1 1 1 0 0 0 m s 1 % C6.2.122 LDRAA, LDRAB<br>
 1 1 1 1 1 0 0 1 1 0 _ % C6.2.200 PRFM (immediate)<br>
    </font></p>

    <h3>APPENDIX B</h3>

    <p>Advanced SIMD and FPU ISA aka NEON:</p>

        <p><font face="monospace" size=3>
0 x 0 s 1 1 1 0 s s 1 ... 0 | 1 0 1 1 1 0 % C7.2.001 ABS<br>
0 x 0 s 1 1 1 0 s s 1 ... _ | 1 0 0 0 0 1 % C7.2 002 ADD (vector)<br>
0 x 0 0 1 1 1 0 s s 1 ... _ | 0 1 0 0 0 0 % C7.2.003 ADDHN, ADDHN2<br>
0 1 0 1 1 1 1 0 s s 1 ... 1 | 1 0 1 1 1 0 % C7.2.004 ADDP (scalar)<br>
0 x 0 0 1 1 1 0 s s 1 ... _ | 1 0 1 1 1 1 % C7.2.005 ADDP (vector)<br>
0 x 0 0 1 1 1 0 s s 1 ... 1 | 1 0 1 1 1 0 % C7.2.006 ADDV<br>
0 1 0 0 1 1 1 0 0 0 1 ... 0 | 0 1 0 1 1 0 % C7.2.007 AESD - AES single round decryption.<br>
0 1 0 0 1 1 1 0 0 0 1 ... 0 | 0 1 0 0 1 0 % C7.2.008 AESE - AES single round encryption.<br>
0 1 0 0 1 1 1 0 0 0 1 ... 0 | 0 1 1 1 1 0 % C7.2.009 AESIMC - AES inverse mix columns.<br>
0 1 0 0 1 1 1 0 0 0 1 ... 0 | 0 1 1 0 1 0 % C7.2.010 AESMC - AES mix columns.<br>
0 x 0 0 1 1 1 0 0 0 1 ... _ | 0 0 0 1 1 1 % C7.2.011 AND (vector)<br>
1 1 0 0 1 1 1 0 0 0 1 ... _ | 0 _ _ _ _ _ % C7.2.012 BCAX<br>
0 x 1 0 1 1 1 1 0 0 0 ... c | x x x 1 0 1 % C7.2.013 BIC (vector, immediate)<br>
0 x 0 0 1 1 1 0 0 1 1 ... _ | 0 0 0 1 1 1 % C7.2.014 BIC (vector, register)<br>
0 x 1 0 1 1 1 0 s s 1 ... _ | 1 0 1 0 0 0 % C7.2.352 UMLSL, UMLSL2 (vector)<br>
0 x 0 0 1 1 1 0 0 0 0 ... _ | 0 0 1 1 1 1 % C7.2.353 UMOV<br>
0 x 1 0 1 1 1 1 s s i ... _ | 1 0 1 0 h 0 % C7.2.354 UMULL, UMULL2 (by element)<br>
0 x 1 0 1 1 1 0 s s 1 ... _ | 1 1 0 0 0 0 % C7.2.355 UMULL, UMULL2 (vector)<br>
0 x 1 0 1 1 1 0 s s 1 ... _ | 0 0 0 0 1 1 % C7.2.356 UQADD<br>
0 x 1 0 1 1 1 0 s s 1 ... _ | 0 1 0 1 1 1 % C7.2.357 UQRSHL<br>
0 x 1 0 1 1 1 1 0 _ _ ... _ | 1 0 0 1 1 1 % C7.2.358 UQRSHRN, UQRSHRN2<br>
0 x 1 i 1 1 1 1 0 _ _ ... _ | 0 1 1 1 0 1 % C7.2.359 UQSHL (immediate)<br>
0 x 1 i 1 1 1 0 s s 1 ... _ | 0 1 0 0 1 1 % C7.2.360 UQSHL (register)<br>
0 x 1 0 1 1 1 1 0 _ _ ... _ | 1 0 0 1 0 1 % C7.2.361 UQSHRN, UQSHRN2<br>
0 x 1 i 1 1 1 0 s s 1 ... _ | 0 0 1 0 1 1 % C7.2.362 UQSUB - Unsigned saturating Subtract.<br>
0 x 1 i 1 1 1 0 s s 1 ... 1 | 0 1 0 0 1 0 % C7.2.363 UQXTN, UQXTN2 - Unsigned saturating extract Narrow.<br>
0 x 0 0 1 1 1 0 1 s 1 ... 1 | 1 1 0 0 1 0 % C7.2.364 URECPE - Unsigned Reciprocal Estimate.<br>
0 x 1 0 1 1 1 0 s s 1 ... _ | 0 0 0 1 0 1 % C7.2.365 URHADD Unsigned Rounding Halving Add.<br>
0 x 1 i 1 1 1 0 s s 1 ... _ | 0 1 0 1 0 1 % C7.2.366 URSHL - Unsigned Rounding Shift Left (register).<br>
0 1 1 1 1 1 1 1 0 _ _ ... _ | 0 0 1 0 0 1 % C7.2.367 URSHR - Unsigned Rounding Shift Right (immediate).<br>
0 x 1 0 1 1 1 0 1 s 1 ... 1 | 1 1 0 0 1 0 % C7.2.368 URSQRTE - Unsigned Reciprocal Square Root Estimate.<br>
0 1 1 1 1 1 1 1 0 _ _ ... _ | 0 0 1 1 0 1 % C7.2.369 URSRA<br>
0 1 1 1 1 1 1 0 s s 1 ... _ | 0 1 0 0 0 1 % C7.2.370 USHL - Unsigned Shift Left (register).<br>
0 x 1 0 1 1 1 1 0 _ _ ... 0 | 1 0 1 0 0 1 % C7.2.371 USHLL, USHLL2 % C7.2.377 UXTL, UXTL2<br>
0 1 1 1 1 1 1 1 0 _ _ ... _ | 0 0 0 0 0 1 % C7.2.372 USHR - Unsigned Shift Right (immediate).<br>
0 x 1 s 1 1 1 0 s s 1 ... 0 | 0 0 0 1 1 1 % C7.2.373 USQADD<br>
0 1 1 1 1 1 1 1 0 _ _ ... _ | 0 0 0 1 0 1 % C7.2.374 USRA<br>
0 x 1 0 1 1 1 0 s s 1 ... _ | 0 0 1 0 0 0 % C7.2.375 USUBL, USUBL2<br>
0 x 1 0 1 1 1 0 s s 1 ... _ | 0 0 1 1 0 0 % C7.2.376 USUBW, USUBW2 - Unsigned Subtract Wide.<br>
0 x 0 0 1 1 1 0 s s 0 ... _ | 0 0 0 1 1 0 % C7.2.378 UZP1 - Unzip vectors (primary).<br>
0 x 0 0 1 1 1 0 s s 0 ... _ | 0 1 0 1 1 0 % C7.2.379 UZP2 - Unzip vectors (secondary).<br>
1 1 0 0 1 1 1 0 1 0 0 ... _ | _ _ _ _ _ _ % C7.2.380 XAR - Exclusive OR and Rotate.<br>
0 x 0 0 1 1 1 0 s s 1 ... 1 | 0 0 1 0 1 0 % C7.2.381 XTN, XTN2 - Extract Narrow.<br>
0 x 0 0 1 1 1 0 s s 0 ... _ | 0 0 1 1 1 0 % C7.2.382 ZIP1 - Zip vectors (primary).<br>
0 x 0 0 1 1 1 0 s s 0 ... _ | 0 1 1 1 1 0 % C7.2.383 ZIP2 - Zip vectors (secondary).<br>
    </font></p>

    </section>
</main>
<footer>Namdak Tonpa <span class="heart">&nbsp;❤&nbsp;</span> 2009—2019</footer>
</body>
</html>
