<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Namdak Tonpa" />
    <title>2019-05-13</title>
    <link rel="stylesheet" href="../../blank.css" />
</head>
<body>
<nav>
    <a href='../../index.html'>5HT</a>
    <a href='../index.html'>STREAM</a>
    <a href='#'>2019-05-13</a>
</nav>
<main>
    <section>
        <h3>C++/WinRT ARM64</h3>

        <p>Here we will setup dev env and build blank Universal Windows
           Platform (UWP) app for WinRT/ARM64.
           In Visual Studio 2019 for C++/WinRT you have only three project templates:<br>
           — Windows Runtime Component;<br>
           — Blank App;<br>
           — Core App.<br>
           Core App skeleton is a bit heavy and Runtime Component is not
           runnable let's show how to build latest blank UWP application.</p>
	
        <h3>PATH</h3>
 
        <p>For console build you need to properly specify all paths both to Windows Kit and
           Visual Studio folders. I'm doing this every time I install Windows dev box,
           unfortunately we are still far from zero dev env creation in 2019 at all platforms.
           So take this paths when you preffer to manually control everything:</p>

        <p>— C:\Windows\Microsoft.NET\Framework64\v4.0.30319<br>
           — C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x64<br>
           — C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\x64<p>

        <p>The Visuall Studio folder are placed here
           "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community", so
           add the following relative paths from here:

        <p>— VC\Tools\MSVC\14.20.27508\bin\Hostx64\x64<br>
           — MSBuild\Microsoft\VC\v160<br>
           — MSBuild\Current\Bin</p>

        <h3>INCLUDES</h3>

        <p>The language projection or rather bundle of bunch of include files
           is being generated by <b>cppwinrt</b> which is now a part of <b>xlang</b> 
           but delivered through nuget channel.
           The cppwinrt tool reads platform.winmd
           and windows.winmd metaiformation,
           and generates winrt/base.h file with along with whole WinRT API
           macros which include all legacy pointer conversions.
           The best way to learn WinRT namespaces is
           by using .NET CLR tool <b>ildasm</b> as WinRT metainformation is compatible
           with .NET and this is defined in ECMA-335.
           I assume you're going easy way and have used Visual Studio 2019
           for this code generation. But if you're willing to do this by yourself:
           </p>                            	

        <p><b>cppwinrt.exe -base -input 10.0.18362.0 -include winrt</b></p> 

         <p>NOTE: The latest cppwinrt binary for your host platform
            can be obtained with <b>pwsh</b> and
            'Install-Package Microsoft.Windows.CppWinRT' or with 
            '<b>nuget</b> install Microsoft.Windows.CppWinRT'.</p>

        <p>— <a href="https://github.com/microsoft/xlang">microsoft/xlang</a></p>

	<h3>PE/COFF</h3>

        <p>Here is covered binary image generation.
           You can specify the build targets by <b>msbuild</b> arguments:</p>
        <p><b>msbuild /p:Configuration=Release /p:Platform=ARM
                      /p:PlatformToolset=v142
                      /p:TargetPlatformVersion=10.0.18362.0
                      /p:PreferredToolArchitecture=ARM</b></p> 
        <p>The msbuild tool is being distributed over Windows/Microsoft.NET, Windows Kit and Visual Studio channels.
           It is also available at nuget and github:</p>
        <p>— <a href="https://github.com/microsoft/msbuild">microsoft/msbuild</a></p>

        <p>If you want to build PE/COFF by <b>cl</b> manually, here is command line options.
           Please ensure you're using right binary from your
           host folder 'VC\Tools\MSVC\14.20.27508\bin\Hostx64\x64', if you do cross compilation.
           Here is example fot x64.</p>
      
        <p><b>cl "Generated Files\module.g.cpp" App.cpp MainPage.cpp pch.cpp
   "Generated Files\XamlTypeInfo.g.cpp" "Generated Files\XamlTypeInfo.Impl.g.cpp" 
   "Generated Files\XamlMetaDataProvider.cpp" 
   /c /ZW:nostdlib /MP /TP /EHsc /Gd /GS /GL /sdl /O2 /Oi /Oy- /bigobj /await
   /fp:precise /Zc:wchar_t /Zc:forScope /W4 /std:c++17 
   /D NDEBUG /D _UNICODE /D UNICODE /D WINAPI_FAMILY=WINAPI_FAMILY_APP
   /AI"C:\Program Files (x86)\Windows Kits\10\UnionMetadata\10.0.18362.0" 
   /AI"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\lib\x86\store\references" 
   /I".\\" /I"Generated Files\\" 
   /I"C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um" 
   /I"C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/shared" 
   /I"C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/winrt" 
   /I"C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/ucrt" 
   /I"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include" 
   </b></p>

      <p>Link part:</p>

    <p><b>link.exe pch.obj App.obj MainPage.obj module.g.obj XamlMetaDataProvider.obj 
     XamlTypeInfo.Impl.g.obj XamlTypeInfo.g.obj WindowsApp.lib 
     /LIBPATH:"C:\Program Files (x86)\Windows Kits\10\Lib\10.0.18362.0\um\x64" 
     /LIBPATH:"C:\Program Files (x86)\Windows Kits\10\Lib\10.0.18362.0\ucrt\x64" 
     /LIBPATH:"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\lib\x64" 
     /DYNAMICBASE /WINMD:NO /SUBSYSTEM:WINDOWS /MACHINE:X64 /APPCONTAINER 
     /OPT:REF /OPT:ICF /MANIFEST:NO /LTCG:incremental /NXCOMPAT /TLBID:1 
     /OUT:Chat.exe /ENTRY:wWinMain</b></p>
        
        <p>The PE/COFF <b>Chat.exe</b> application on x64 takes 193KB.</p>

	<h3>APPX</h3>
        
        <p>After building the binaries you're unable to run the application immediately,
            first you need to create .appx file with <b>makeappx</b> which is a part of Windows Kit:</p>
        
        <p><b>makeappx pack /d "./ARM/Release/Chat/" /l /p "./Chat.appx"</b></p>
        <p>And as you guess that's not enough as you need to sign your application
           client certificate with $100 of cost enrollment from Microsoft.
           NOTE: SHA256 is the only way.</p>

        <p><b>signtool sign /fd SHA256 /a /f Chat_TemporaryKey.pfx Chat.appx</b></p>

        <p>Now you're able to deploy and run app from start menu
           or send the app to store for review.</p> 

        <p>Comments as Github Issue: <a href="https://github.com/5ht/tonpa.guru/issues/9">https://github.com/5ht/tonpa.guru/issues/9</a></p>

    </section>
</main>
<footer>Namdak Tonpa <span class="heart">&nbsp;❤&nbsp;</span> 2009—2019</footer>
</body>
</html>
