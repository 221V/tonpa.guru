<html>
<head>
    <meta charset="utf-8"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="description" content=""/>
    <meta name="author" content="Namdak Tonpa"/>
    <title>2019-06-30</title>
    <link rel="stylesheet" href="../../blank.css"/>
</head>
<body>
<nav>
    <a href='../../index.html'>5HT</a>
    <a href='../index.html'>TOP</a>
    <a href='#'>2019-06-30</a>
</nav>
<main>
    <section>
        <h3>Сайнерси Энтерпрайзинг</h3>
        <p>Данная статья является путеводителем по тому как мы строим приложения в SYNRC
           и как выглядит наша концепция управления программным комплесом предприятия.</p>
    </section>
    <section>
        <h3>INTRO</h3>
        <p>Наше именование 8.3 совместимо с файловыми системами CP/M, TRS-80, Atari, DEC.
           Первые версии Erlang были в 1988 году. Что сказать, мы помним как строить приложения.
           Кратко называем модули, как в SAP, BAAN и системах прошлого, но при этом мы так же
           лаконичны и в имплементациях. У нас строгое ограничение на размеры модулей в LOC - 1K для библиотек,
           и 2К для приложений. Мы используем только бинарные протоколы, и полнодуплексные
           каналы связи для наших приложений реального времени. В качестве протоколов мы
           зафиксированы на TCP, MQTT и WebSocket, а также UDP, QUIC. Для персистентных стримов
           мы используем HTTP/2. Наши системы обслуживают суточную норму пользователей на одном
           компьютере за 7 секунд в самом большом банке восточной европы и при этом их
           скомпилированный код помещаются на дискету 2.88". А сами системы написана на языке
           которому 30 лет и который не потерял совсместимости с 10-летней версией!
           Если это не технологическая стабильность, то нам вам нечего предложить более устоявшегося.
           Если добавить бесплатный ASN.1 компилятор и 80% GSM трафика проходяшего через этот язык
           станет понятно, что выбор этот безальтернативен.</p>

   <p><font face="monospace" size=5 style="white-space: pre;">
  <a href="https://n2o.dev">SYNRC</a>       <a href="https://n2o.space">ENTERPRISE</a>  <a href="https://o7.network">O7</a>          TRUSTED CA
  ----------- ----------- ----------- ----------- 
  active      acc         bud         n2o.dev
  bert        bank        chat        n2o.space
  bpe         chat        plm         synrc.com
  form        crm         sample      synrc.space
  fs          db
  kvs         ent
  mach        erp
  mad         fin
  n2o         fix
  nitro       ldap
  pie         mq
  rest        pay
  sh          pm
              review
              rocksdb
              sample
              scm
              sys
              tic
              tms
              wms
              xio
        </font></p>

        <p>Пока вы поняли, что Scala не взлетит, и на Go вы не получите никакого технологического
           преимущества, кроме латенси — мы создали систему управления предприятия старым дедовским способом.
           Да мы поддерживаем микросервисы и можем разнести компоненты нашего предприятия, но предпочитаем
           устанавливать наши системы на монолитах, исключение разве что уместно для CA ауторити
           он же Identity Server, в качестве которого можно использовать in house LDAP сервер SYNRC.</p>

        <p>В качестве системы хранения мы используем локальные BTree таблицы под
           управлением <strike>bdb</strike>, <strike>leveldb</strike>, rocksdb
           как делали наши деды в Fox Pro и Paradox. А распределенеые транзакции делаем в духе выделеного
           сервера как Microsoft DTSC COM+. Таким образом вы получаете сразу нормальное (CoSQL) представление всех цепочек,
           и любому программисту будет понятна система управления ими, при условии, что он знает что такое BTree.
           А распределенным коммитом вы управляете сами и сами выбираете протокол оракула.</p>

        <p>Да мы предлагаем вам чуть более прямой и непосредственный путь кодирования данных, для
           совершения продвинутого репортинга вы по прежнему будете должны иметь офлайновые бекофис системы
           аналитики на SQL. Но в рантайме и операционной части этого не должно быть. Оно не только сжирает ресурсы,
           но и проло масштабируется, специалисты по SQL профилированию редкие и дорогие. SQL имплементации пишутся
           идиотами, поэтому системы состоят из 7 слоев заплаток. Мир стартапов уже вернулся в NoSQL,
           Google например, поэтому бизнесу пора тоже подтягиваться, а софт для бизнеса старше чем Google!</p>

        <p>Наши протоколы вкатываются с типовыми аннотации и генерируются для следующих языков:
           Java, Swift, JavaScript, Google Protobuf V3, ASN.1. Также мы генерируем валидаторы данных по этим
           типовым спецификациям и встраиваем эти валидаторы в тракт наших распределенных протоколов,
           поэтому мы никогда не позволим клиентам испортить сторадж. Для веб приложений у нас развитая
           система валидации для JavaScript и на стороне сервера. Бизнес логика полностью изолирована в нашей
           системе управления бизнес процессами, где каждый бизнес процесс
           является процессом виртуальной машины. Все цепочки модифицируются атомарным образом,
           поддерживают flake адресацию и не требуют дополнительной изоляции в своем принимитивном использовании.
           Поэтому вы можете трактовать базу как распределенный кеш и использвать базу из фронт приложений для
           определенных случаев.</p>
    </section>
    <section>
    </section>
</main>
<footer>Namdak Tonpa <span class="heart">&nbsp;❤&nbsp;</span> 2009—2019</footer>
</body>
</html>
