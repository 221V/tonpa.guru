<html>
<head>
    <meta charset="utf-8"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="description" content=""/>
    <meta name="author" content="Namdak Tonpa"/>
    <title>2019-06-30</title>
    <link rel="stylesheet" href="../../blank.css?v=3"/>
</head>
<body>
<nav>
    <a href='../../index.html'>5HT</a>
    <a href='../index.html'>TOP</a>
    <a href='#'>2019-06-30</a>
</nav>
<main>
    <section>
        <h3>Часть 1. Введение</h3>

        <p>— <a href="2019-06-30%20DEPOT.htm">Часть 1. Введение</a><br>
           — <a href="2019-07-08%20ERP%20BOOT.htm">Часть 2. Пусконаладка предприятия</a><br>
           — <a href="2019-07-08%20KVS%20ADM.htm">Часть 3. Администратор данных</a><br>
           — <a href="2019-07-09%20BPE%20ADM.htm">Часть 4. Администратор процессов</a><br>
           — <a href="2019-07-17%20ENT%20APP.htm">Часть 5. Структура приложения</a><br>
           — <a href="2019-07-19%20ENT%20PUB.htm">Часть 6. Публикация в GCP</a></p>

        <p>Данный текст является руководством разработчика для посторения бизнес приложений.
           В нём мы покажем как разработывать приложения для предприятий
           раскрыв мотивацию и предназначение библиотек N2O.DEV и приложений
           модулей N2O.SPACE проедприятия SYNRC.</p>

        <h4>Руководство разработчика PLM</h4>

        <p>В качестве примера, на котором будет продемонстрирована распределенная
           архитектура приложений SYNRC, мы рассмотрим реальную систему управления
           аусорсинговым предприятием (компанией Quanterall), на базе
           типовой конфигурации или типового модуля — системы управления жизненным циклом
           продуктов и проектов — Product Lifecycle Managenent (PLM);
           и покажем как строить открытые приложения с хостингом на Github (статика) и
           публикацией в GCP (сервисы).</p>

        <p>Система PLM  зависит также от других модулей предпрития:
           FIN — финансовый модуль управления персональными счетами и счетами предприятия;
           ACC — модуль управления персоналом и контрагентами;
           ERP — модуль инкапсуляции организационной структуры предприятия;
           LDAP — система управление идентификаторами и ключами.
           Кроме модулей предприятия здесь также рассматриваются библиотеки,
           зависимости модуля PLM:
           BPE — система управления бизнес процессами предприятия;
           KVS — система хранения данных;
           FORM — система генерации форм.  PLM зависит и от других библиотек, но они
           в этом документе не рассматриваются:
           N2O — система управления соединениями и протоколами;
           NITRO — система генерация HTML5.</p>

        <h4>Задачи и требования PLM модуля</h4>

        <p>Cистема управления аутсорсинговым предприятием с возможностью
           инвестирования и учётом опционов программистов.
           Цель: повышение прозрачности ведения бизнеса,
           возможность программистам видеть начисления по опционам,
           кеш-флоу, доходы и потери, и другие классические отчеты.</P>

        <p>Цели проекта:</P>

        <p>— Создание панели управления директора, работников и инвесторов;<br>
           — Попроектная отчетность;<br>
           — Управление опционами программистов;<br>
           — Инвестирование в проекты другими инвесторами (со страхованием).</p>

        <p>Бизнес процесы:</p>

        <p>— Бизнесс-процесс счет участника проекта;<br>
           — Главный бизнес-процес модуля — долгоживущий проект-продукт (PLM);<br>
           — Создание проекта с привлечением инвестиций под залог других проектов;<br>
           — Ежемесячный процесс распределения прибыли:
             после вычитания свёртки выплаченых зарплат из свёртки оплаченых счетов клиентам
             по CashFlow мы формируем список статей:
             1) страховой фонд (который откусывается если мы используем этот проект
                как залог для кредита на другой проект;
             2) опционы программиистов
                которые выдаются автоматически людям которые работают на этом проекте,
                но любые другие могут тоже учавствовать;
             3) наш заработок (свободный пул или резервация);
             4) R&D отчисления (обязательные).</p>

        <h4>Другие модули предприятия</h4>

        <p>Если рассматривать систему PLM как одну из подсистем предприятия,
           то для полной картины покажем какое место занимает PLM в плеяде
           приложений SYNRC:</p>

   <figure><code>
  <a href="https://n2o.dev">N2O.DEV</a> <a href="https://n2o.space">N2O.SPACE</a> <a href="https://o7.network">O7.NETWORK</a> TRUSTED
  ------- --------- ---------- -----------
  active  acc       bud        n2o.dev
  bert    bank      chat       n2o.space
  bpe     chat      plm        synrc.com
  form    crm       sample     synrc.space
  fs      db
  kvs     ent
  mach    erp
  mad     fin
  n2o     fix
  nitro   ldap
  pie     mq
  rest    pay
  sh      pm
          review
          rocksdb
          sample
          scm
          sys
          tic
          tms
          wms
          xio
        </code></figure>

        <p><b>LDAP</b> — Сервер аутентификации, хранение ключей и директория предприятия.</p>

        <p><b>ERP</b> — Этот модуль хранит основную иерархическую структуру
        предприятия, ее схему, записи о персонале, инвентаре, компаниях
        предприятия, их офисах.</p>

        <p><b>FIN</b> — Финансовый модуль предприятия, который хранит бизнес
        процессы представляющие собой счета учасников системы: персонал (для начисления зарплат),
        счета и субсчета предприятия (для совершения экономической деятельности) и
        внешние счета в платежных системах.</p>

        <p><b>ACC</b> — Система управления персоналом: зарплатные ведомости,
        календарь предприятия, отпуска, декреты, другие календари.</p>

        <p><b>SCM</b> — Система управления цепочкой поставок: главный БП системы —
           экспидиционный процесс доставки товаров цепочке получателей
           с помощью транспортных компаний.</p>

        <p><b>CRM</b> — Система управления клиентами: является расширение более
           абстрактного приложения CHAT, которое можно увидеть
           на <a href="https://n2o.im">n2o.im</a>.</p>

        <p><b>PLM</b> — Система управления жизненным циклом проектов и продуктов.
           Содержит также CashFlow и P&L отчёты.</p>

        <p><b>PM</b> — Система управления проектами предприятия с детализацией
           времени и протоколов приема-передачи (принятые коммиты в гитхабе).</p>

        <p><b>WMS</b> — Система управления складом.</p>

        <p><b>TMS</b> — Система управления транспортом предприятия.</p>

    </section>
    <section>
        <h3>Управление ресурсами</h3>

        <p></p>

        <p>Главным образом информационная структура нашего предприятия
           состоит из вычислительных ресурсов (приложений запущены в шине)
           и накопительных ресурсов (даных сохраненных в базах данных).
           SOA архитектура в качестве модели модель управления вычислительными
           ресурсами предлагает асинхронный протокол удаленного вызова на шинах.
           С N2O можно использовать MQTT и другие шины посредством следующих протоколов: TCP, WebSocket.
           Еще эти асинхронные протоколы часто называются
           протоколами реального времени, так как функции посылки сообщений всегда
           быстро возвращают результат. Что касается протоколов для публикации и доступа
           к данным то тут может оказаться уместным использование синхронного HTTP протокола.</p>

        <h4>Вычислительные ресурсы</h4>

        <p>Для SOA архитектуры традиционно используются асинхронные
           протоколы доступа к вычислительным ресурсам. Обычно это сервереные
           воркеры подключённые к шине и обслуживающее API опредённого приложения.
           Каждое приложение имеет свой консистентное хеш-кольцо воркеров. В сети
           работает одноврменно множество колец-приложений.</p>

   <figure><code>
config :n2o,
  tcp_services: ['ldap'],
  ws_services: ['chat'],
  mqtt_services: ['erp', 'bpe']
   </code></figure>

        <p>С помощью <b>config.exs</b> файла можно сконфигурировать необходимую
           конфигурацию серии консистентных колец каждое из которых работает
           на своем транспортном протоколе.</p>

   <figure><code>
> :supervisor.which_children(:n2o)
[
  {{:tcp, '/ldap/tcp/4'}, #PID<0.985.0>, :worker, [:n2o_tcp]},
  {{:tcp, '/ldap/tcp/3'}, #PID<0.984.0>, :worker, [:n2o_tcp]},
  {{:tcp, '/ldap/tcp/2'}, #PID<0.983.0>, :worker, [:n2o_tcp]},
  {{:tcp, '/ldap/tcp/1'}, #PID<0.982.0>, :worker, [:n2o_tcp]},
  {{:ws, '/chat/ws/4'}, #PID<0.985.0>, :worker, [:n2o_ws]},
  {{:ws, '/chat/ws/3'}, #PID<0.984.0>, :worker, [:n2o_ws]},
  {{:ws, '/chat/ws/2'}, #PID<0.983.0>, :worker, [:n2o_ws]},
  {{:ws, '/chat/ws/1'}, #PID<0.982.0>, :worker, [:n2o_ws]},
  {{:mqtt, '/erp/mqtt/4'}, #PID<0.977.0>, :worker, [:n2o_mqtt]},
  {{:mqtt, '/erp/mqtt/3'}, #PID<0.976.0>, :worker, [:n2o_mqtt]},
  {{:mqtt, '/erp/mqtt/2'}, #PID<0.975.0>, :worker, [:n2o_mqtt]},
  {{:mqtt, '/erp/mqtt/1'}, #PID<0.974.0>, :worker, [:n2o_mqtt]},
  {{:mqtt, '/bpe/mqtt/4'}, #PID<0.977.0>, :worker, [:n2o_mqtt]},
  {{:mqtt, '/bpe/mqtt/3'}, #PID<0.976.0>, :worker, [:n2o_mqtt]},
  {{:mqtt, '/bpe/mqtt/2'}, #PID<0.975.0>, :worker, [:n2o_mqtt]},
  {{:mqtt, '/bpe/mqtt/1'}, #PID<0.974.0>, :worker, [:n2o_mqtt]},
  {{:caching, 'timer'}, #PID<0.969.0>, :worker, [:n2o]}
]
    </code></figure>

        <p>Благодаря такой детализации можно проектировать гетерогенные системы
           включая необходимые протоколы на портах нужных машин. Эта же система
           позволяет добиться балансировки нагрузки закрепляя за физическими ресурсами
           наборы виртуальных нод которые обслуживают запросы для определённого приложения.</p>

        <p>В нашей модели асинхронные протоколы используются для управления
           вычислительными ресурсами предприятия.</p>

        <h4>Накопительные ресурсы</h4>

        <p>Распределённые хеш-кольца используются не только для распределения вычислительных
           данных но и для хранения, в том числе и для хранения в рамках одной машины.
           Некоторые базы данных, например RocksDB и Cassandra используют глобальное пространство
           ключей для данных в отличие от таблично-ориентированных баз. Именно для таких
           баз и создана библиотека KVS, где в качестве синхронного транзакционного
           интерфейса — API цепочек c гарантией консистентности.</p>

   <figure><code>
> :kvs.all :writer
[
  {:writer, '/bpe/proc', 2, [], [], []},
  {:writer, '/erp/group', 1, [], [], []},
  {:writer, '/erp/partners', 7, [], [], []},
  {:writer, '/acc/synrc/Kyiv', 3, [], [], []},
  {:writer, '/chat/5HT', 1, [], [], []},
  {:writer, '/bpe/hist/1562187187807717000', 16, [], [], []},
  {:writer, '/bpe/hist/1562192587632329000', 1, [], [], []}
]
    </code></figure>

        <p>Протоколы определяются с типовыми аннотации и генерируются для следующих языков:
           Java, Swift, JavaScript, Google Protobuf V3, ASN.1. Также мы генерируем валидаторы данных по этим
           типовым спецификациям и встраиваем эти валидаторы в тракт наших распределенных протоколов,
           поэтому мы никогда не позволим клиентам испортить сторадж. Для веб приложений у нас развитая
           система валидации как для JavaScript так и на стороне сервера. Бизнес логика полностью изолирована в нашей
           системе управления бизнес процессами, где каждый бизнес процесс
           является процессом виртуальной машины. Все цепочки модифицируются атомарным образом,
           поддерживают flake адресацию и не требуют дополнительной изоляции в своём принимитивном использовании.
           Поэтому вы можете трактовать базу как распределенный кеш и использвать её из фронт приложений для
           примитивных случаев.</p>

        <p>В нашей модели синхронные протоколы используются для управления
           накопительными ресурсами предприятия и транзакционного процессинга.</p>

        <h3>Отзывы</h3>

        <p>Мы намеренно пытались создать стек, для управления которым хватит зананий обычного
           1С/PHP программиста, так мы вступаем в конкуренцию с 1С но на рынке програмиистов
           индивидуальных автоматизаторов предприятий. В стартапах они были бы минимум СТО компании-предприятия.
           Обычно это человек-оркестры которые могут совершать ассесмент,
           выступать в роли системных аналитиков и делать прототипы на PHP/1C
           или в рамках своих технологических предпочтений.</p>

        <p>Вот, что пишет один из таких системных аналитиков, Саша Пальчиковский:</p>

        <p><font color=gray>
Я 20 лет работаю с 1С и отлично знаю ее достоинства и недостатки.<br><br>
Основные достоинства системы: <br>
— скорость разработки бизнес-приложений: ты оперируешь набором объектов, уже обладающих огромным набором функциональности, тебе остается только описать их бизнес-логику, при этом интерфейс пользователя создается автоматически, причем конфигурация способна работать на разных операционных системах и веб-клиентах.<br>
— очень мощный движок отчетов;<br>
— простой язык и огромное сообщество программистов;<br><br>
Основные недостатки:<br>
— цена за универсальность — невысокая производительность;<br>
— язык процедурный, со слабой проверкой синтаксиса, как следствие две проблемы 1) невысокая надежность 2) сложные конфигурации представляют из себя гору кода-спагетти, который очень непросто поддерживать и вносить в него изменения.<br>
— Отстуствие надежного и быстрого динамического обновления кода/структуры данных: формально механизмы есть (и динамическое обновление, и механизм расширений), а на практике их использование стараются ограничивать и обновлять конфигурацию в монопольном режиме. <br>
<br>
Почему мне нравится Erlang и N2O:<br>
— Мало кода — 1000 LOC на очень функциональное приложение — это невероятно! У меня один сложный запрос может содержать строк кода в два раза больше.<br><br>
— Let it crash — я так устал трястись по поводу возможных ошибок после внедрения и последующего геморроя по их исправлению.<br><br>
— Бизнес-процессность языка — чем крупнее бизнес, тем, на мой взгляд, он больше нуждается в бизнес-процессах, как способе контролировать управленческий хаос. И, соответственно, информационная система, построенная на бизнес-процессах, позволяет с одной стороны выстроить бизнес-процессы компании в процессе внедрения бизнес-процессов информационной системы, а с другой стороны дает возможность легко менять информационную систему, отражая изменения реальных бизнес-процессов. Такая система максимально соответствует реальности, а значит наиболее эффективна. А теперь добавьте к этому плюшки Эрланга вида: неограниченная масштабируемость, высокая производительность и надежность, и получите, на мой взгляд, идеальную систему для бизнеса.<br><br>
        </code></figure>

    </section>
    <section>
    </section>
</main>
<footer>Namdak Tonpa <span class="heart">&nbsp;❤&nbsp;</span> 2009—2019</footer>
</body>
</html>
